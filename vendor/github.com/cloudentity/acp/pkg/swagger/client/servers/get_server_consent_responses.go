// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp/pkg/swagger/models"
)

// GetServerConsentReader is a Reader for the GetServerConsent structure.
type GetServerConsentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServerConsentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServerConsentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetServerConsentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetServerConsentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetServerConsentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetServerConsentOK creates a GetServerConsentOK with default headers values
func NewGetServerConsentOK() *GetServerConsentOK {
	return &GetServerConsentOK{}
}

/*GetServerConsentOK handles this case with default header values.

ServerConsent
*/
type GetServerConsentOK struct {
	Payload *models.ServerConsent
}

func (o *GetServerConsentOK) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/servers/{aid}/server-consent][%d] getServerConsentOK  %+v", 200, o.Payload)
}

func (o *GetServerConsentOK) GetPayload() *models.ServerConsent {
	return o.Payload
}

func (o *GetServerConsentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerConsent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerConsentUnauthorized creates a GetServerConsentUnauthorized with default headers values
func NewGetServerConsentUnauthorized() *GetServerConsentUnauthorized {
	return &GetServerConsentUnauthorized{}
}

/*GetServerConsentUnauthorized handles this case with default header values.

HttpError
*/
type GetServerConsentUnauthorized struct {
	Payload *models.Error
}

func (o *GetServerConsentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/servers/{aid}/server-consent][%d] getServerConsentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetServerConsentUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerConsentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerConsentForbidden creates a GetServerConsentForbidden with default headers values
func NewGetServerConsentForbidden() *GetServerConsentForbidden {
	return &GetServerConsentForbidden{}
}

/*GetServerConsentForbidden handles this case with default header values.

HttpError
*/
type GetServerConsentForbidden struct {
	Payload *models.Error
}

func (o *GetServerConsentForbidden) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/servers/{aid}/server-consent][%d] getServerConsentForbidden  %+v", 403, o.Payload)
}

func (o *GetServerConsentForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerConsentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerConsentNotFound creates a GetServerConsentNotFound with default headers values
func NewGetServerConsentNotFound() *GetServerConsentNotFound {
	return &GetServerConsentNotFound{}
}

/*GetServerConsentNotFound handles this case with default header values.

HttpError
*/
type GetServerConsentNotFound struct {
	Payload *models.Error
}

func (o *GetServerConsentNotFound) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/servers/{aid}/server-consent][%d] getServerConsentNotFound  %+v", 404, o.Payload)
}

func (o *GetServerConsentNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerConsentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
