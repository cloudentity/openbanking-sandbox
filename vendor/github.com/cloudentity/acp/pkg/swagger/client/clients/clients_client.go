// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new clients API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clients API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateClient(params *CreateClientParams, authInfo runtime.ClientAuthInfoWriter) (*CreateClientCreated, error)

	CreateClientForDeveloper(params *CreateClientForDeveloperParams, authInfo runtime.ClientAuthInfoWriter) (*CreateClientForDeveloperCreated, error)

	DeleteClient(params *DeleteClientParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteClientNoContent, error)

	DeleteClientForDeveloper(params *DeleteClientForDeveloperParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteClientForDeveloperNoContent, error)

	GetClient(params *GetClientParams, authInfo runtime.ClientAuthInfoWriter) (*GetClientOK, error)

	GetClientForDeveloper(params *GetClientForDeveloperParams, authInfo runtime.ClientAuthInfoWriter) (*GetClientForDeveloperOK, error)

	ListClients(params *ListClientsParams, authInfo runtime.ClientAuthInfoWriter) (*ListClientsOK, error)

	ListClientsForDeveloper(params *ListClientsForDeveloperParams, authInfo runtime.ClientAuthInfoWriter) (*ListClientsForDeveloperOK, error)

	ListClientsSystem(params *ListClientsSystemParams, authInfo runtime.ClientAuthInfoWriter) (*ListClientsSystemOK, error)

	ListClientsWithAccess(params *ListClientsWithAccessParams, authInfo runtime.ClientAuthInfoWriter) (*ListClientsWithAccessOK, error)

	RevokeClientAccess(params *RevokeClientAccessParams, authInfo runtime.ClientAuthInfoWriter) (*RevokeClientAccessNoContent, error)

	UpdateClient(params *UpdateClientParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateClientOK, error)

	UpdateClientForDeveloper(params *UpdateClientForDeveloperParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateClientForDeveloperOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateClient creates new o auth client

  Client must be created under existing tenant and authorization server.

Authorization server id must be provided in the request body.

Client id and secret can be provided, otherwise are generated.

If grant type is not set, client will get authorization code grant type assigned with code as response type.

Default token authentication method is client_secret_basic.
*/
func (a *Client) CreateClient(params *CreateClientParams, authInfo runtime.ClientAuthInfoWriter) (*CreateClientCreated, error) {
	// : Validate the params before sending
	if params == nil {
		params = NewCreateClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createClient",
		Method:             "POST",
		PathPattern:        "/api/admin/{tid}/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateClientCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateClientForDeveloper creates new o auth client

  Client must be created under existing tenant and authorization server.

Authorization server id where client should be assigned must be provided in the request body.

Client can't be created in a system authorization server.

Client id and secret are generated upon creation.

If grant type is not set, client will get authorization code grant type assigned with code as response type.

Default token authentication method is client_secret_basic.

It might happen that it won't be possible to create a client with specified scopes.
Scopes assignment can be protected by policies defined by administrator.
*/
func (a *Client) CreateClientForDeveloper(params *CreateClientForDeveloperParams, authInfo runtime.ClientAuthInfoWriter) (*CreateClientForDeveloperCreated, error) {
	// : Validate the params before sending
	if params == nil {
		params = NewCreateClientForDeveloperParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createClientForDeveloper",
		Method:             "POST",
		PathPattern:        "/api/developer/{tid}/{aid}/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateClientForDeveloperReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateClientForDeveloperCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createClientForDeveloper: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteClient deletes client

  Delete client.
*/
func (a *Client) DeleteClient(params *DeleteClientParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteClientNoContent, error) {
	// : Validate the params before sending
	if params == nil {
		params = NewDeleteClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteClient",
		Method:             "DELETE",
		PathPattern:        "/api/admin/{tid}/clients/{cid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClientNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteClientForDeveloper deletes client

  Delete client owned by developer.
*/
func (a *Client) DeleteClientForDeveloper(params *DeleteClientForDeveloperParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteClientForDeveloperNoContent, error) {
	// : Validate the params before sending
	if params == nil {
		params = NewDeleteClientForDeveloperParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteClientForDeveloper",
		Method:             "DELETE",
		PathPattern:        "/api/developer/{tid}/{aid}/clients/{cid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClientForDeveloperReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClientForDeveloperNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteClientForDeveloper: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClient gets client

  If client has been created by a developer, client's secret will be empty.
*/
func (a *Client) GetClient(params *GetClientParams, authInfo runtime.ClientAuthInfoWriter) (*GetClientOK, error) {
	// : Validate the params before sending
	if params == nil {
		params = NewGetClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClient",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/clients/{cid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClientForDeveloper gets client

  Get client owned by developer.
*/
func (a *Client) GetClientForDeveloper(params *GetClientForDeveloperParams, authInfo runtime.ClientAuthInfoWriter) (*GetClientForDeveloperOK, error) {
	// : Validate the params before sending
	if params == nil {
		params = NewGetClientForDeveloperParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClientForDeveloper",
		Method:             "GET",
		PathPattern:        "/api/developer/{tid}/{aid}/clients/{cid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClientForDeveloperReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientForDeveloperOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClientForDeveloper: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListClients lists clients

  Returns clients created by admins and developers. If client has been created by a developer, client secret will be empty.
*/
func (a *Client) ListClients(params *ListClientsParams, authInfo runtime.ClientAuthInfoWriter) (*ListClientsOK, error) {
	// : Validate the params before sending
	if params == nil {
		params = NewListClientsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClients",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListClientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listClients: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListClientsForDeveloper lists clients

  List clients owner by developer.
*/
func (a *Client) ListClientsForDeveloper(params *ListClientsForDeveloperParams, authInfo runtime.ClientAuthInfoWriter) (*ListClientsForDeveloperOK, error) {
	// : Validate the params before sending
	if params == nil {
		params = NewListClientsForDeveloperParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClientsForDeveloper",
		Method:             "GET",
		PathPattern:        "/api/developer/{tid}/{aid}/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListClientsForDeveloperReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClientsForDeveloperOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listClientsForDeveloper: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListClientsSystem lists clients by authorization server

  This API lists clients by server
*/
func (a *Client) ListClientsSystem(params *ListClientsSystemParams, authInfo runtime.ClientAuthInfoWriter) (*ListClientsSystemOK, error) {
	// : Validate the params before sending
	if params == nil {
		params = NewListClientsSystemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClientsSystem",
		Method:             "GET",
		PathPattern:        "/api/system/{tid}/clients/{aid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListClientsSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClientsSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listClientsSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListClientsWithAccess lists clients that user shared data with

  Each client contains list of scopes that user agreed to.
*/
func (a *Client) ListClientsWithAccess(params *ListClientsWithAccessParams, authInfo runtime.ClientAuthInfoWriter) (*ListClientsWithAccessOK, error) {
	// : Validate the params before sending
	if params == nil {
		params = NewListClientsWithAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClientsWithAccess",
		Method:             "GET",
		PathPattern:        "/{tid}/{aid}/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListClientsWithAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClientsWithAccessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listClientsWithAccess: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokeClientAccess revokes client access

  Upon removal client won't be able to use user data anymore.
*/
func (a *Client) RevokeClientAccess(params *RevokeClientAccessParams, authInfo runtime.ClientAuthInfoWriter) (*RevokeClientAccessNoContent, error) {
	// : Validate the params before sending
	if params == nil {
		params = NewRevokeClientAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "revokeClientAccess",
		Method:             "DELETE",
		PathPattern:        "/{tid}/{aid}/clients/{cid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeClientAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeClientAccessNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeClientAccess: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateClient updates client

  Update client.

For clients created by developers only metadata, system and trusted attributes
can be updated.
*/
func (a *Client) UpdateClient(params *UpdateClientParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateClientOK, error) {
	// : Validate the params before sending
	if params == nil {
		params = NewUpdateClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateClient",
		Method:             "PUT",
		PathPattern:        "/api/admin/{tid}/clients/{cid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateClientForDeveloper updates client

  The entire client object must be send for update.
*/
func (a *Client) UpdateClientForDeveloper(params *UpdateClientForDeveloperParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateClientForDeveloperOK, error) {
	// : Validate the params before sending
	if params == nil {
		params = NewUpdateClientForDeveloperParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateClientForDeveloper",
		Method:             "PUT",
		PathPattern:        "/api/developer/{tid}/{aid}/clients/{cid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateClientForDeveloperReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClientForDeveloperOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateClientForDeveloper: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
