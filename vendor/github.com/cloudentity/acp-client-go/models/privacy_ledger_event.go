// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrivacyLedgerEvent privacy ledger event
//
// swagger:model PrivacyLedgerEvent
type PrivacyLedgerEvent struct {

	// date
	// Format: date-time
	Date strfmt.DateTime `json:"date,omitempty"`

	// ID
	ID string `json:"id,omitempty"`

	// payload signature
	PayloadSignature string `json:"payload_signature,omitempty"`

	// subject
	Subject string `json:"subject,omitempty"`

	// tenant ID
	TenantID string `json:"tenant_id,omitempty"`

	// payload
	Payload *PrivacyLedgerPayload `json:"payload,omitempty"`
}

// Validate validates this privacy ledger event
func (m *PrivacyLedgerEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivacyLedgerEvent) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PrivacyLedgerEvent) validatePayload(formats strfmt.Registry) error {

	if swag.IsZero(m.Payload) { // not required
		return nil
	}

	if m.Payload != nil {
		if err := m.Payload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payload")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivacyLedgerEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivacyLedgerEvent) UnmarshalBinary(b []byte) error {
	var res PrivacyLedgerEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
