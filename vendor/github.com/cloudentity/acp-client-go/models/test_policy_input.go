// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TestPolicyInput test policy input
//
// swagger:model TestPolicyInput
type TestPolicyInput struct {

	// contexts
	Contexts map[string]interface{} `json:"contexts,omitempty"`

	// authn ctx
	AuthnCtx AuthenticationContext `json:"authn_ctx,omitempty"`

	// request
	Request *TestPolicyInputRequest `json:"request,omitempty"`
}

// Validate validates this test policy input
func (m *TestPolicyInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthnCtx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestPolicyInput) validateAuthnCtx(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthnCtx) { // not required
		return nil
	}

	if err := m.AuthnCtx.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authn_ctx")
		}
		return err
	}

	return nil
}

func (m *TestPolicyInput) validateRequest(formats strfmt.Registry) error {

	if swag.IsZero(m.Request) { // not required
		return nil
	}

	if m.Request != nil {
		if err := m.Request.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("request")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestPolicyInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestPolicyInput) UnmarshalBinary(b []byte) error {
	var res TestPolicyInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
