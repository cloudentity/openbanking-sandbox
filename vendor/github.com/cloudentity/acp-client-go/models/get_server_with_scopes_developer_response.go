// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetServerWithScopesDeveloperResponse get server with scopes developer response
//
// swagger:model GetServerWithScopesDeveloperResponse
type GetServerWithScopesDeveloperResponse struct {

	// Color
	Color string `json:"color,omitempty"`

	// supported grant types
	GrantTypes []string `json:"grant_types"`

	// authorization server id
	ID string `json:"id,omitempty"`

	// issuer URL
	IssuerURL string `json:"issuer_url,omitempty"`

	// authorizations server name
	Name string `json:"name,omitempty"`

	// list of scopes
	Scopes []*ScopeWithServiceDeveloperResponse `json:"scopes"`

	// supported subject identifier types
	SubjectIdentifierTypes []string `json:"subject_identifier_types"`
}

// Validate validates this get server with scopes developer response
func (m *GetServerWithScopesDeveloperResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScopes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetServerWithScopesDeveloperResponse) validateScopes(formats strfmt.Registry) error {

	if swag.IsZero(m.Scopes) { // not required
		return nil
	}

	for i := 0; i < len(m.Scopes); i++ {
		if swag.IsZero(m.Scopes[i]) { // not required
			continue
		}

		if m.Scopes[i] != nil {
			if err := m.Scopes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scopes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetServerWithScopesDeveloperResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetServerWithScopesDeveloperResponse) UnmarshalBinary(b []byte) error {
	var res GetServerWithScopesDeveloperResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
