// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IDPSettings ID p settings
//
// swagger:model IDPSettings
type IDPSettings struct {

	// azure
	Azure *AzureSettings `json:"azure,omitempty"`

	// azureb2c
	Azureb2c *AzureB2CSettings `json:"azureb2c,omitempty"`

	// cognito
	Cognito *CognitoSettings `json:"cognito,omitempty"`

	// custom
	Custom *CustomSettings `json:"custom,omitempty"`

	// github
	Github *GithubSettings `json:"github,omitempty"`

	// intelli trust
	IntelliTrust *IntelliTrustSettings `json:"intelli_trust,omitempty"`

	// oidc
	Oidc *OIDCSettings `json:"oidc,omitempty"`

	// okta
	Okta *OktaSettings `json:"okta,omitempty"`

	// saml
	Saml *SAMLSettings `json:"saml,omitempty"`

	// static
	Static *StaticSettings `json:"static,omitempty"`
}

// Validate validates this ID p settings
func (m *IDPSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAzure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureb2c(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCognito(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGithub(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntelliTrust(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOidc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOkta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSaml(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IDPSettings) validateAzure(formats strfmt.Registry) error {

	if swag.IsZero(m.Azure) { // not required
		return nil
	}

	if m.Azure != nil {
		if err := m.Azure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure")
			}
			return err
		}
	}

	return nil
}

func (m *IDPSettings) validateAzureb2c(formats strfmt.Registry) error {

	if swag.IsZero(m.Azureb2c) { // not required
		return nil
	}

	if m.Azureb2c != nil {
		if err := m.Azureb2c.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureb2c")
			}
			return err
		}
	}

	return nil
}

func (m *IDPSettings) validateCognito(formats strfmt.Registry) error {

	if swag.IsZero(m.Cognito) { // not required
		return nil
	}

	if m.Cognito != nil {
		if err := m.Cognito.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cognito")
			}
			return err
		}
	}

	return nil
}

func (m *IDPSettings) validateCustom(formats strfmt.Registry) error {

	if swag.IsZero(m.Custom) { // not required
		return nil
	}

	if m.Custom != nil {
		if err := m.Custom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom")
			}
			return err
		}
	}

	return nil
}

func (m *IDPSettings) validateGithub(formats strfmt.Registry) error {

	if swag.IsZero(m.Github) { // not required
		return nil
	}

	if m.Github != nil {
		if err := m.Github.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("github")
			}
			return err
		}
	}

	return nil
}

func (m *IDPSettings) validateIntelliTrust(formats strfmt.Registry) error {

	if swag.IsZero(m.IntelliTrust) { // not required
		return nil
	}

	if m.IntelliTrust != nil {
		if err := m.IntelliTrust.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intelli_trust")
			}
			return err
		}
	}

	return nil
}

func (m *IDPSettings) validateOidc(formats strfmt.Registry) error {

	if swag.IsZero(m.Oidc) { // not required
		return nil
	}

	if m.Oidc != nil {
		if err := m.Oidc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc")
			}
			return err
		}
	}

	return nil
}

func (m *IDPSettings) validateOkta(formats strfmt.Registry) error {

	if swag.IsZero(m.Okta) { // not required
		return nil
	}

	if m.Okta != nil {
		if err := m.Okta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("okta")
			}
			return err
		}
	}

	return nil
}

func (m *IDPSettings) validateSaml(formats strfmt.Registry) error {

	if swag.IsZero(m.Saml) { // not required
		return nil
	}

	if m.Saml != nil {
		if err := m.Saml.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saml")
			}
			return err
		}
	}

	return nil
}

func (m *IDPSettings) validateStatic(formats strfmt.Registry) error {

	if swag.IsZero(m.Static) { // not required
		return nil
	}

	if m.Static != nil {
		if err := m.Static.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("static")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IDPSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IDPSettings) UnmarshalBinary(b []byte) error {
	var res IDPSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
