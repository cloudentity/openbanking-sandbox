// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenbankingAccountAccessConsentWithClient openbanking account access consent with client
//
// swagger:model OpenbankingAccountAccessConsentWithClient
type OpenbankingAccountAccessConsentWithClient struct {

	// The unique AccountId(s) that are valid for the account-access-consent
	AccountIDs []string `json:"account_ids"`

	// url to a client website
	ClientURI string `json:"client_uri,omitempty"`

	// Unique identification as assigned to identify the account access consent resource.
	ConsentID string `json:"consent_id,omitempty"`

	// Date and time at which the resource was created.
	// Format: date-time
	CreationDateTime strfmt.DateTime `json:"creation_date_time,omitempty"`

	// Specified date and time the permissions will expire. If this is not populated,
	// the permissions will be open ended.
	// Format: date-time
	ExpirationDateTime strfmt.DateTime `json:"expiration_date_time,omitempty"`

	// client id
	ID string `json:"id,omitempty"`

	// url to a page where client logo is served
	LogoURI string `json:"logo_uri,omitempty"`

	// client name
	Name string `json:"name,omitempty"`

	// Specifies the Open Banking account access data types. This is a list of the data clusters
	// being consented by the PSU, and requested for authorisation with the ASPSP.
	Permissions []string `json:"permissions"`

	// Specifies the status of consent resource in code form.
	Status string `json:"status,omitempty"`

	// Date and time at which the resource status was updated.
	// Format: date-time
	StatusUpdateDateTime strfmt.DateTime `json:"status_update_date_time,omitempty"`

	// Specified start date and time for the transaction query period. If this is not populated,
	// the start date will be open ended, and data will be returned from the earliest available transaction.
	// Format: date-time
	TransactionFromDateTime strfmt.DateTime `json:"transaction_from_date_time,omitempty"`

	// Specified end date and time for the transaction query period. If this is not populated,
	// the end date will be open ended, and data will be returned to the latest available transaction.
	// Format: date-time
	TransactionToDateTime strfmt.DateTime `json:"transaction_to_date_time,omitempty"`
}

// Validate validates this openbanking account access consent with client
func (m *OpenbankingAccountAccessConsentWithClient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusUpdateDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionFromDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionToDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingAccountAccessConsentWithClient) validateCreationDateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date_time", "body", "date-time", m.CreationDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenbankingAccountAccessConsentWithClient) validateExpirationDateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration_date_time", "body", "date-time", m.ExpirationDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenbankingAccountAccessConsentWithClient) validateStatusUpdateDateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusUpdateDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("status_update_date_time", "body", "date-time", m.StatusUpdateDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenbankingAccountAccessConsentWithClient) validateTransactionFromDateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionFromDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("transaction_from_date_time", "body", "date-time", m.TransactionFromDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenbankingAccountAccessConsentWithClient) validateTransactionToDateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionToDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("transaction_to_date_time", "body", "date-time", m.TransactionToDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenbankingAccountAccessConsentWithClient) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenbankingAccountAccessConsentWithClient) UnmarshalBinary(b []byte) error {
	var res OpenbankingAccountAccessConsentWithClient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
