// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServiceConnectedToGateway service connected to gateway
//
// swagger:model ServiceConnectedToGateway
type ServiceConnectedToGateway struct {

	// Optional id of api group id connected to the service
	APIGroupID string `json:"api_group_id,omitempty"`

	// service audience
	Audience string `json:"audience,omitempty"`

	// server id
	AuthorizationServerID string `json:"authorization_server_id,omitempty"`

	// service description
	Description string `json:"description,omitempty"`

	// gateway id
	GatewayID string `json:"gateway_id,omitempty"`

	// unique service id
	ID string `json:"id,omitempty"`

	// service name
	Name string `json:"name,omitempty"`

	// Is service a system service
	System bool `json:"system,omitempty"`

	// tenant id
	TenantID string `json:"tenant_id,omitempty"`

	// true if service has openapi 3 specification
	WithSpecification bool `json:"with_specification,omitempty"`

	// api group metadata
	APIGroupMetadata *APIGroupMetadata `json:"api_group_metadata,omitempty"`
}

// Validate validates this service connected to gateway
func (m *ServiceConnectedToGateway) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIGroupMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceConnectedToGateway) validateAPIGroupMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.APIGroupMetadata) { // not required
		return nil
	}

	if m.APIGroupMetadata != nil {
		if err := m.APIGroupMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("api_group_metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceConnectedToGateway) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceConnectedToGateway) UnmarshalBinary(b []byte) error {
	var res ServiceConnectedToGateway
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
