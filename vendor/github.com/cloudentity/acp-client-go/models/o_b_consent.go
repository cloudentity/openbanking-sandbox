// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OBConsent o b consent
//
// swagger:model OBConsent
type OBConsent struct {

	// client ID
	ClientID string `json:"client_id,omitempty"`

	// consent ID
	ConsentID string `json:"consent_id,omitempty"`

	// server ID
	ServerID string `json:"server_id,omitempty"`

	// tenant ID
	TenantID string `json:"tenant_id,omitempty"`

	// account access consent
	AccountAccessConsent *AccountAccessConsent `json:"account_access_consent,omitempty"`

	// type
	Type ConsentType `json:"type,omitempty"`
}

// Validate validates this o b consent
func (m *OBConsent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountAccessConsent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBConsent) validateAccountAccessConsent(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountAccessConsent) { // not required
		return nil
	}

	if m.AccountAccessConsent != nil {
		if err := m.AccountAccessConsent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account_access_consent")
			}
			return err
		}
	}

	return nil
}

func (m *OBConsent) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBConsent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBConsent) UnmarshalBinary(b []byte) error {
	var res OBConsent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
