// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// UpdateAuthorizationServerReader is a Reader for the UpdateAuthorizationServer structure.
type UpdateAuthorizationServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAuthorizationServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAuthorizationServerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAuthorizationServerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAuthorizationServerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAuthorizationServerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAuthorizationServerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateAuthorizationServerUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateAuthorizationServerOK creates a UpdateAuthorizationServerOK with default headers values
func NewUpdateAuthorizationServerOK() *UpdateAuthorizationServerOK {
	return &UpdateAuthorizationServerOK{}
}

/*UpdateAuthorizationServerOK handles this case with default header values.

Server
*/
type UpdateAuthorizationServerOK struct {
	Payload *models.Server
}

func (o *UpdateAuthorizationServerOK) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}][%d] updateAuthorizationServerOK  %+v", 200, o.Payload)
}

func (o *UpdateAuthorizationServerOK) GetPayload() *models.Server {
	return o.Payload
}

func (o *UpdateAuthorizationServerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Server)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthorizationServerBadRequest creates a UpdateAuthorizationServerBadRequest with default headers values
func NewUpdateAuthorizationServerBadRequest() *UpdateAuthorizationServerBadRequest {
	return &UpdateAuthorizationServerBadRequest{}
}

/*UpdateAuthorizationServerBadRequest handles this case with default header values.

HttpError
*/
type UpdateAuthorizationServerBadRequest struct {
	Payload *models.Error
}

func (o *UpdateAuthorizationServerBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}][%d] updateAuthorizationServerBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAuthorizationServerBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAuthorizationServerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthorizationServerUnauthorized creates a UpdateAuthorizationServerUnauthorized with default headers values
func NewUpdateAuthorizationServerUnauthorized() *UpdateAuthorizationServerUnauthorized {
	return &UpdateAuthorizationServerUnauthorized{}
}

/*UpdateAuthorizationServerUnauthorized handles this case with default header values.

HttpError
*/
type UpdateAuthorizationServerUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateAuthorizationServerUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}][%d] updateAuthorizationServerUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateAuthorizationServerUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAuthorizationServerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthorizationServerForbidden creates a UpdateAuthorizationServerForbidden with default headers values
func NewUpdateAuthorizationServerForbidden() *UpdateAuthorizationServerForbidden {
	return &UpdateAuthorizationServerForbidden{}
}

/*UpdateAuthorizationServerForbidden handles this case with default header values.

HttpError
*/
type UpdateAuthorizationServerForbidden struct {
	Payload *models.Error
}

func (o *UpdateAuthorizationServerForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}][%d] updateAuthorizationServerForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAuthorizationServerForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAuthorizationServerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthorizationServerNotFound creates a UpdateAuthorizationServerNotFound with default headers values
func NewUpdateAuthorizationServerNotFound() *UpdateAuthorizationServerNotFound {
	return &UpdateAuthorizationServerNotFound{}
}

/*UpdateAuthorizationServerNotFound handles this case with default header values.

HttpError
*/
type UpdateAuthorizationServerNotFound struct {
	Payload *models.Error
}

func (o *UpdateAuthorizationServerNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}][%d] updateAuthorizationServerNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAuthorizationServerNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAuthorizationServerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthorizationServerUnprocessableEntity creates a UpdateAuthorizationServerUnprocessableEntity with default headers values
func NewUpdateAuthorizationServerUnprocessableEntity() *UpdateAuthorizationServerUnprocessableEntity {
	return &UpdateAuthorizationServerUnprocessableEntity{}
}

/*UpdateAuthorizationServerUnprocessableEntity handles this case with default header values.

HttpError
*/
type UpdateAuthorizationServerUnprocessableEntity struct {
	Payload *models.Error
}

func (o *UpdateAuthorizationServerUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}][%d] updateAuthorizationServerUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateAuthorizationServerUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAuthorizationServerUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
