// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// UpdatePolicyReader is a Reader for the UpdatePolicy structure.
type UpdatePolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdatePolicyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdatePolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdatePolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdatePolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdatePolicyConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdatePolicyUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdatePolicyCreated creates a UpdatePolicyCreated with default headers values
func NewUpdatePolicyCreated() *UpdatePolicyCreated {
	return &UpdatePolicyCreated{}
}

/*UpdatePolicyCreated handles this case with default header values.

Policy
*/
type UpdatePolicyCreated struct {
	Payload *models.Policy
}

func (o *UpdatePolicyCreated) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/policies/{pid}][%d] updatePolicyCreated  %+v", 201, o.Payload)
}

func (o *UpdatePolicyCreated) GetPayload() *models.Policy {
	return o.Payload
}

func (o *UpdatePolicyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Policy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyBadRequest creates a UpdatePolicyBadRequest with default headers values
func NewUpdatePolicyBadRequest() *UpdatePolicyBadRequest {
	return &UpdatePolicyBadRequest{}
}

/*UpdatePolicyBadRequest handles this case with default header values.

HttpError
*/
type UpdatePolicyBadRequest struct {
	Payload *models.Error
}

func (o *UpdatePolicyBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/policies/{pid}][%d] updatePolicyBadRequest  %+v", 400, o.Payload)
}

func (o *UpdatePolicyBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdatePolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyUnauthorized creates a UpdatePolicyUnauthorized with default headers values
func NewUpdatePolicyUnauthorized() *UpdatePolicyUnauthorized {
	return &UpdatePolicyUnauthorized{}
}

/*UpdatePolicyUnauthorized handles this case with default header values.

HttpError
*/
type UpdatePolicyUnauthorized struct {
	Payload *models.Error
}

func (o *UpdatePolicyUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/policies/{pid}][%d] updatePolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdatePolicyUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdatePolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyForbidden creates a UpdatePolicyForbidden with default headers values
func NewUpdatePolicyForbidden() *UpdatePolicyForbidden {
	return &UpdatePolicyForbidden{}
}

/*UpdatePolicyForbidden handles this case with default header values.

HttpError
*/
type UpdatePolicyForbidden struct {
	Payload *models.Error
}

func (o *UpdatePolicyForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/policies/{pid}][%d] updatePolicyForbidden  %+v", 403, o.Payload)
}

func (o *UpdatePolicyForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdatePolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyNotFound creates a UpdatePolicyNotFound with default headers values
func NewUpdatePolicyNotFound() *UpdatePolicyNotFound {
	return &UpdatePolicyNotFound{}
}

/*UpdatePolicyNotFound handles this case with default header values.

HttpError
*/
type UpdatePolicyNotFound struct {
	Payload *models.Error
}

func (o *UpdatePolicyNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/policies/{pid}][%d] updatePolicyNotFound  %+v", 404, o.Payload)
}

func (o *UpdatePolicyNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdatePolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyConflict creates a UpdatePolicyConflict with default headers values
func NewUpdatePolicyConflict() *UpdatePolicyConflict {
	return &UpdatePolicyConflict{}
}

/*UpdatePolicyConflict handles this case with default header values.

HttpError
*/
type UpdatePolicyConflict struct {
	Payload *models.Error
}

func (o *UpdatePolicyConflict) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/policies/{pid}][%d] updatePolicyConflict  %+v", 409, o.Payload)
}

func (o *UpdatePolicyConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdatePolicyConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyUnprocessableEntity creates a UpdatePolicyUnprocessableEntity with default headers values
func NewUpdatePolicyUnprocessableEntity() *UpdatePolicyUnprocessableEntity {
	return &UpdatePolicyUnprocessableEntity{}
}

/*UpdatePolicyUnprocessableEntity handles this case with default header values.

HttpError
*/
type UpdatePolicyUnprocessableEntity struct {
	Payload *models.Error
}

func (o *UpdatePolicyUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/policies/{pid}][%d] updatePolicyUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdatePolicyUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdatePolicyUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
