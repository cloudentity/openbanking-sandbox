// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// TestPolicyReader is a Reader for the TestPolicy structure.
type TestPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TestPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTestPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTestPolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTestPolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewTestPolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTestPolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewTestPolicyConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewTestPolicyUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTestPolicyOK creates a TestPolicyOK with default headers values
func NewTestPolicyOK() *TestPolicyOK {
	return &TestPolicyOK{}
}

/*TestPolicyOK handles this case with default header values.

TestPolicyResponse
*/
type TestPolicyOK struct {
	Payload *models.TestPolicyResponse
}

func (o *TestPolicyOK) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/policies/test][%d] testPolicyOK  %+v", 200, o.Payload)
}

func (o *TestPolicyOK) GetPayload() *models.TestPolicyResponse {
	return o.Payload
}

func (o *TestPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TestPolicyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestPolicyBadRequest creates a TestPolicyBadRequest with default headers values
func NewTestPolicyBadRequest() *TestPolicyBadRequest {
	return &TestPolicyBadRequest{}
}

/*TestPolicyBadRequest handles this case with default header values.

HttpError
*/
type TestPolicyBadRequest struct {
	Payload *models.Error
}

func (o *TestPolicyBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/policies/test][%d] testPolicyBadRequest  %+v", 400, o.Payload)
}

func (o *TestPolicyBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *TestPolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestPolicyUnauthorized creates a TestPolicyUnauthorized with default headers values
func NewTestPolicyUnauthorized() *TestPolicyUnauthorized {
	return &TestPolicyUnauthorized{}
}

/*TestPolicyUnauthorized handles this case with default header values.

HttpError
*/
type TestPolicyUnauthorized struct {
	Payload *models.Error
}

func (o *TestPolicyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/policies/test][%d] testPolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *TestPolicyUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *TestPolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestPolicyForbidden creates a TestPolicyForbidden with default headers values
func NewTestPolicyForbidden() *TestPolicyForbidden {
	return &TestPolicyForbidden{}
}

/*TestPolicyForbidden handles this case with default header values.

HttpError
*/
type TestPolicyForbidden struct {
	Payload *models.Error
}

func (o *TestPolicyForbidden) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/policies/test][%d] testPolicyForbidden  %+v", 403, o.Payload)
}

func (o *TestPolicyForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *TestPolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestPolicyNotFound creates a TestPolicyNotFound with default headers values
func NewTestPolicyNotFound() *TestPolicyNotFound {
	return &TestPolicyNotFound{}
}

/*TestPolicyNotFound handles this case with default header values.

HttpError
*/
type TestPolicyNotFound struct {
	Payload *models.Error
}

func (o *TestPolicyNotFound) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/policies/test][%d] testPolicyNotFound  %+v", 404, o.Payload)
}

func (o *TestPolicyNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *TestPolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestPolicyConflict creates a TestPolicyConflict with default headers values
func NewTestPolicyConflict() *TestPolicyConflict {
	return &TestPolicyConflict{}
}

/*TestPolicyConflict handles this case with default header values.

HttpError
*/
type TestPolicyConflict struct {
	Payload *models.Error
}

func (o *TestPolicyConflict) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/policies/test][%d] testPolicyConflict  %+v", 409, o.Payload)
}

func (o *TestPolicyConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *TestPolicyConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestPolicyUnprocessableEntity creates a TestPolicyUnprocessableEntity with default headers values
func NewTestPolicyUnprocessableEntity() *TestPolicyUnprocessableEntity {
	return &TestPolicyUnprocessableEntity{}
}

/*TestPolicyUnprocessableEntity handles this case with default header values.

HttpError
*/
type TestPolicyUnprocessableEntity struct {
	Payload *models.Error
}

func (o *TestPolicyUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/policies/test][%d] testPolicyUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *TestPolicyUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *TestPolicyUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
