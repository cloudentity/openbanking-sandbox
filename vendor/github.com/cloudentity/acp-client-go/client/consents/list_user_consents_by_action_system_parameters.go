// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListUserConsentsByActionSystemParams creates a new ListUserConsentsByActionSystemParams object
// with the default values initialized.
func NewListUserConsentsByActionSystemParams() *ListUserConsentsByActionSystemParams {
	var (
		actionDefault = string("default")
		tidDefault    = string("default")
	)
	return &ListUserConsentsByActionSystemParams{
		Action: actionDefault,
		Tid:    tidDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListUserConsentsByActionSystemParamsWithTimeout creates a new ListUserConsentsByActionSystemParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListUserConsentsByActionSystemParamsWithTimeout(timeout time.Duration) *ListUserConsentsByActionSystemParams {
	var (
		actionDefault = string("default")
		tidDefault    = string("default")
	)
	return &ListUserConsentsByActionSystemParams{
		Action: actionDefault,
		Tid:    tidDefault,

		timeout: timeout,
	}
}

// NewListUserConsentsByActionSystemParamsWithContext creates a new ListUserConsentsByActionSystemParams object
// with the default values initialized, and the ability to set a context for a request
func NewListUserConsentsByActionSystemParamsWithContext(ctx context.Context) *ListUserConsentsByActionSystemParams {
	var (
		actionDefault = string("default")
		tidDefault    = string("default")
	)
	return &ListUserConsentsByActionSystemParams{
		Action: actionDefault,
		Tid:    tidDefault,

		Context: ctx,
	}
}

// NewListUserConsentsByActionSystemParamsWithHTTPClient creates a new ListUserConsentsByActionSystemParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListUserConsentsByActionSystemParamsWithHTTPClient(client *http.Client) *ListUserConsentsByActionSystemParams {
	var (
		actionDefault = string("default")
		tidDefault    = string("default")
	)
	return &ListUserConsentsByActionSystemParams{
		Action:     actionDefault,
		Tid:        tidDefault,
		HTTPClient: client,
	}
}

/*ListUserConsentsByActionSystemParams contains all the parameters to send to the API endpoint
for the list user consents by action system operation typically these are written to a http.Request
*/
type ListUserConsentsByActionSystemParams struct {

	/*Action
	  Consent action id

	*/
	Action string
	/*Tid
	  Tenant id

	*/
	Tid string
	/*XSubject
	  user identifier

	*/
	Subject *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) WithTimeout(timeout time.Duration) *ListUserConsentsByActionSystemParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) WithContext(ctx context.Context) *ListUserConsentsByActionSystemParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) WithHTTPClient(client *http.Client) *ListUserConsentsByActionSystemParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) WithAction(action string) *ListUserConsentsByActionSystemParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) SetAction(action string) {
	o.Action = action
}

// WithTid adds the tid to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) WithTid(tid string) *ListUserConsentsByActionSystemParams {
	o.SetTid(tid)
	return o
}

// SetTid adds the tid to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) SetTid(tid string) {
	o.Tid = tid
}

// WithSubject adds the xSubject to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) WithSubject(xSubject *string) *ListUserConsentsByActionSystemParams {
	o.SetSubject(xSubject)
	return o
}

// SetSubject adds the xSubject to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) SetSubject(xSubject *string) {
	o.Subject = xSubject
}

// WriteToRequest writes these params to a swagger request
func (o *ListUserConsentsByActionSystemParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param action
	if err := r.SetPathParam("action", o.Action); err != nil {
		return err
	}

	// path param tid
	if err := r.SetPathParam("tid", o.Tid); err != nil {
		return err
	}

	if o.Subject != nil {

		// header param x-subject
		if err := r.SetHeaderParam("x-subject", *o.Subject); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
