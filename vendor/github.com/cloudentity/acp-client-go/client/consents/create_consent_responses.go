// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// CreateConsentReader is a Reader for the CreateConsent structure.
type CreateConsentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateConsentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateConsentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateConsentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateConsentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateConsentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateConsentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateConsentUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateConsentCreated creates a CreateConsentCreated with default headers values
func NewCreateConsentCreated() *CreateConsentCreated {
	return &CreateConsentCreated{}
}

/*CreateConsentCreated handles this case with default header values.

Consent
*/
type CreateConsentCreated struct {
	Payload *models.Consent
}

func (o *CreateConsentCreated) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/consents][%d] createConsentCreated  %+v", 201, o.Payload)
}

func (o *CreateConsentCreated) GetPayload() *models.Consent {
	return o.Payload
}

func (o *CreateConsentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Consent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentUnauthorized creates a CreateConsentUnauthorized with default headers values
func NewCreateConsentUnauthorized() *CreateConsentUnauthorized {
	return &CreateConsentUnauthorized{}
}

/*CreateConsentUnauthorized handles this case with default header values.

HttpError
*/
type CreateConsentUnauthorized struct {
	Payload *models.Error
}

func (o *CreateConsentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/consents][%d] createConsentUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateConsentUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentForbidden creates a CreateConsentForbidden with default headers values
func NewCreateConsentForbidden() *CreateConsentForbidden {
	return &CreateConsentForbidden{}
}

/*CreateConsentForbidden handles this case with default header values.

HttpError
*/
type CreateConsentForbidden struct {
	Payload *models.Error
}

func (o *CreateConsentForbidden) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/consents][%d] createConsentForbidden  %+v", 403, o.Payload)
}

func (o *CreateConsentForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentNotFound creates a CreateConsentNotFound with default headers values
func NewCreateConsentNotFound() *CreateConsentNotFound {
	return &CreateConsentNotFound{}
}

/*CreateConsentNotFound handles this case with default header values.

HttpError
*/
type CreateConsentNotFound struct {
	Payload *models.Error
}

func (o *CreateConsentNotFound) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/consents][%d] createConsentNotFound  %+v", 404, o.Payload)
}

func (o *CreateConsentNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentConflict creates a CreateConsentConflict with default headers values
func NewCreateConsentConflict() *CreateConsentConflict {
	return &CreateConsentConflict{}
}

/*CreateConsentConflict handles this case with default header values.

HttpError
*/
type CreateConsentConflict struct {
	Payload *models.Error
}

func (o *CreateConsentConflict) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/consents][%d] createConsentConflict  %+v", 409, o.Payload)
}

func (o *CreateConsentConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentUnprocessableEntity creates a CreateConsentUnprocessableEntity with default headers values
func NewCreateConsentUnprocessableEntity() *CreateConsentUnprocessableEntity {
	return &CreateConsentUnprocessableEntity{}
}

/*CreateConsentUnprocessableEntity handles this case with default header values.

HttpError
*/
type CreateConsentUnprocessableEntity struct {
	Payload *models.Error
}

func (o *CreateConsentUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/consents][%d] createConsentUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateConsentUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
