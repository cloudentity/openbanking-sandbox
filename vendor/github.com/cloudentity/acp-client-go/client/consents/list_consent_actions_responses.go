// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// ListConsentActionsReader is a Reader for the ListConsentActions structure.
type ListConsentActionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListConsentActionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListConsentActionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListConsentActionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListConsentActionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListConsentActionsOK creates a ListConsentActionsOK with default headers values
func NewListConsentActionsOK() *ListConsentActionsOK {
	return &ListConsentActionsOK{}
}

/*ListConsentActionsOK handles this case with default header values.

ConsentActions
*/
type ListConsentActionsOK struct {
	Payload *models.ConsentActions
}

func (o *ListConsentActionsOK) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/actions][%d] listConsentActionsOK  %+v", 200, o.Payload)
}

func (o *ListConsentActionsOK) GetPayload() *models.ConsentActions {
	return o.Payload
}

func (o *ListConsentActionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConsentActions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListConsentActionsUnauthorized creates a ListConsentActionsUnauthorized with default headers values
func NewListConsentActionsUnauthorized() *ListConsentActionsUnauthorized {
	return &ListConsentActionsUnauthorized{}
}

/*ListConsentActionsUnauthorized handles this case with default header values.

HttpError
*/
type ListConsentActionsUnauthorized struct {
	Payload *models.Error
}

func (o *ListConsentActionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/actions][%d] listConsentActionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListConsentActionsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListConsentActionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListConsentActionsForbidden creates a ListConsentActionsForbidden with default headers values
func NewListConsentActionsForbidden() *ListConsentActionsForbidden {
	return &ListConsentActionsForbidden{}
}

/*ListConsentActionsForbidden handles this case with default header values.

HttpError
*/
type ListConsentActionsForbidden struct {
	Payload *models.Error
}

func (o *ListConsentActionsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/actions][%d] listConsentActionsForbidden  %+v", 403, o.Payload)
}

func (o *ListConsentActionsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListConsentActionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
