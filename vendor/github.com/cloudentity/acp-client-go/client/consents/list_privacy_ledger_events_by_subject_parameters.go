// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListPrivacyLedgerEventsBySubjectParams creates a new ListPrivacyLedgerEventsBySubjectParams object
// with the default values initialized.
func NewListPrivacyLedgerEventsBySubjectParams() *ListPrivacyLedgerEventsBySubjectParams {
	var (
		tidDefault = string("default")
	)
	return &ListPrivacyLedgerEventsBySubjectParams{
		Tid: tidDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListPrivacyLedgerEventsBySubjectParamsWithTimeout creates a new ListPrivacyLedgerEventsBySubjectParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListPrivacyLedgerEventsBySubjectParamsWithTimeout(timeout time.Duration) *ListPrivacyLedgerEventsBySubjectParams {
	var (
		tidDefault = string("default")
	)
	return &ListPrivacyLedgerEventsBySubjectParams{
		Tid: tidDefault,

		timeout: timeout,
	}
}

// NewListPrivacyLedgerEventsBySubjectParamsWithContext creates a new ListPrivacyLedgerEventsBySubjectParams object
// with the default values initialized, and the ability to set a context for a request
func NewListPrivacyLedgerEventsBySubjectParamsWithContext(ctx context.Context) *ListPrivacyLedgerEventsBySubjectParams {
	var (
		tidDefault = string("default")
	)
	return &ListPrivacyLedgerEventsBySubjectParams{
		Tid: tidDefault,

		Context: ctx,
	}
}

// NewListPrivacyLedgerEventsBySubjectParamsWithHTTPClient creates a new ListPrivacyLedgerEventsBySubjectParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListPrivacyLedgerEventsBySubjectParamsWithHTTPClient(client *http.Client) *ListPrivacyLedgerEventsBySubjectParams {
	var (
		tidDefault = string("default")
	)
	return &ListPrivacyLedgerEventsBySubjectParams{
		Tid:        tidDefault,
		HTTPClient: client,
	}
}

/*ListPrivacyLedgerEventsBySubjectParams contains all the parameters to send to the API endpoint
for the list privacy ledger events by subject operation typically these are written to a http.Request
*/
type ListPrivacyLedgerEventsBySubjectParams struct {

	/*From
	  Query events from timestamp (default 0)

	*/
	From *int64
	/*Sub
	  Subject

	*/
	Subject *string
	/*Tid
	  Tenant id

	*/
	Tid string
	/*To
	  Query events to timestamp (default current time)

	*/
	To *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list privacy ledger events by subject params
func (o *ListPrivacyLedgerEventsBySubjectParams) WithTimeout(timeout time.Duration) *ListPrivacyLedgerEventsBySubjectParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list privacy ledger events by subject params
func (o *ListPrivacyLedgerEventsBySubjectParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list privacy ledger events by subject params
func (o *ListPrivacyLedgerEventsBySubjectParams) WithContext(ctx context.Context) *ListPrivacyLedgerEventsBySubjectParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list privacy ledger events by subject params
func (o *ListPrivacyLedgerEventsBySubjectParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list privacy ledger events by subject params
func (o *ListPrivacyLedgerEventsBySubjectParams) WithHTTPClient(client *http.Client) *ListPrivacyLedgerEventsBySubjectParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list privacy ledger events by subject params
func (o *ListPrivacyLedgerEventsBySubjectParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFrom adds the from to the list privacy ledger events by subject params
func (o *ListPrivacyLedgerEventsBySubjectParams) WithFrom(from *int64) *ListPrivacyLedgerEventsBySubjectParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the list privacy ledger events by subject params
func (o *ListPrivacyLedgerEventsBySubjectParams) SetFrom(from *int64) {
	o.From = from
}

// WithSubject adds the sub to the list privacy ledger events by subject params
func (o *ListPrivacyLedgerEventsBySubjectParams) WithSubject(sub *string) *ListPrivacyLedgerEventsBySubjectParams {
	o.SetSubject(sub)
	return o
}

// SetSubject adds the sub to the list privacy ledger events by subject params
func (o *ListPrivacyLedgerEventsBySubjectParams) SetSubject(sub *string) {
	o.Subject = sub
}

// WithTid adds the tid to the list privacy ledger events by subject params
func (o *ListPrivacyLedgerEventsBySubjectParams) WithTid(tid string) *ListPrivacyLedgerEventsBySubjectParams {
	o.SetTid(tid)
	return o
}

// SetTid adds the tid to the list privacy ledger events by subject params
func (o *ListPrivacyLedgerEventsBySubjectParams) SetTid(tid string) {
	o.Tid = tid
}

// WithTo adds the to to the list privacy ledger events by subject params
func (o *ListPrivacyLedgerEventsBySubjectParams) WithTo(to *int64) *ListPrivacyLedgerEventsBySubjectParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the list privacy ledger events by subject params
func (o *ListPrivacyLedgerEventsBySubjectParams) SetTo(to *int64) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *ListPrivacyLedgerEventsBySubjectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.Subject != nil {

		// query param sub
		var qrSub string
		if o.Subject != nil {
			qrSub = *o.Subject
		}
		qSub := qrSub
		if qSub != "" {
			if err := r.SetQueryParam("sub", qSub); err != nil {
				return err
			}
		}

	}

	// path param tid
	if err := r.SetPathParam("tid", o.Tid); err != nil {
		return err
	}

	if o.To != nil {

		// query param to
		var qrTo int64
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := swag.FormatInt64(qrTo)
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
