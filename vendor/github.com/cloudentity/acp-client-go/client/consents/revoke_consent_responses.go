// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// RevokeConsentReader is a Reader for the RevokeConsent structure.
type RevokeConsentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RevokeConsentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRevokeConsentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRevokeConsentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRevokeConsentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRevokeConsentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewRevokeConsentUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRevokeConsentOK creates a RevokeConsentOK with default headers values
func NewRevokeConsentOK() *RevokeConsentOK {
	return &RevokeConsentOK{}
}

/*RevokeConsentOK handles this case with default header values.

ConsentGrant
*/
type RevokeConsentOK struct {
	Payload *models.ConsentGrant
}

func (o *RevokeConsentOK) Error() string {
	return fmt.Sprintf("[POST /{tid}/{aid}/privacy/consents/revoke][%d] revokeConsentOK  %+v", 200, o.Payload)
}

func (o *RevokeConsentOK) GetPayload() *models.ConsentGrant {
	return o.Payload
}

func (o *RevokeConsentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConsentGrant)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeConsentUnauthorized creates a RevokeConsentUnauthorized with default headers values
func NewRevokeConsentUnauthorized() *RevokeConsentUnauthorized {
	return &RevokeConsentUnauthorized{}
}

/*RevokeConsentUnauthorized handles this case with default header values.

HttpError
*/
type RevokeConsentUnauthorized struct {
	Payload *models.Error
}

func (o *RevokeConsentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /{tid}/{aid}/privacy/consents/revoke][%d] revokeConsentUnauthorized  %+v", 401, o.Payload)
}

func (o *RevokeConsentUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeConsentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeConsentForbidden creates a RevokeConsentForbidden with default headers values
func NewRevokeConsentForbidden() *RevokeConsentForbidden {
	return &RevokeConsentForbidden{}
}

/*RevokeConsentForbidden handles this case with default header values.

HttpError
*/
type RevokeConsentForbidden struct {
	Payload *models.Error
}

func (o *RevokeConsentForbidden) Error() string {
	return fmt.Sprintf("[POST /{tid}/{aid}/privacy/consents/revoke][%d] revokeConsentForbidden  %+v", 403, o.Payload)
}

func (o *RevokeConsentForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeConsentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeConsentNotFound creates a RevokeConsentNotFound with default headers values
func NewRevokeConsentNotFound() *RevokeConsentNotFound {
	return &RevokeConsentNotFound{}
}

/*RevokeConsentNotFound handles this case with default header values.

HttpError
*/
type RevokeConsentNotFound struct {
	Payload *models.Error
}

func (o *RevokeConsentNotFound) Error() string {
	return fmt.Sprintf("[POST /{tid}/{aid}/privacy/consents/revoke][%d] revokeConsentNotFound  %+v", 404, o.Payload)
}

func (o *RevokeConsentNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeConsentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeConsentUnprocessableEntity creates a RevokeConsentUnprocessableEntity with default headers values
func NewRevokeConsentUnprocessableEntity() *RevokeConsentUnprocessableEntity {
	return &RevokeConsentUnprocessableEntity{}
}

/*RevokeConsentUnprocessableEntity handles this case with default header values.

HttpError
*/
type RevokeConsentUnprocessableEntity struct {
	Payload *models.Error
}

func (o *RevokeConsentUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /{tid}/{aid}/privacy/consents/revoke][%d] revokeConsentUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *RevokeConsentUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeConsentUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
