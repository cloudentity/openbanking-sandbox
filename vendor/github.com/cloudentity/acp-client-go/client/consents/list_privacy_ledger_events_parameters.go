// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListPrivacyLedgerEventsParams creates a new ListPrivacyLedgerEventsParams object
// with the default values initialized.
func NewListPrivacyLedgerEventsParams() *ListPrivacyLedgerEventsParams {
	var (
		aidDefault = string("default")
		tidDefault = string("default")
	)
	return &ListPrivacyLedgerEventsParams{
		Aid: aidDefault,
		Tid: tidDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListPrivacyLedgerEventsParamsWithTimeout creates a new ListPrivacyLedgerEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListPrivacyLedgerEventsParamsWithTimeout(timeout time.Duration) *ListPrivacyLedgerEventsParams {
	var (
		aidDefault = string("default")
		tidDefault = string("default")
	)
	return &ListPrivacyLedgerEventsParams{
		Aid: aidDefault,
		Tid: tidDefault,

		timeout: timeout,
	}
}

// NewListPrivacyLedgerEventsParamsWithContext creates a new ListPrivacyLedgerEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListPrivacyLedgerEventsParamsWithContext(ctx context.Context) *ListPrivacyLedgerEventsParams {
	var (
		aidDefault = string("default")
		tidDefault = string("default")
	)
	return &ListPrivacyLedgerEventsParams{
		Aid: aidDefault,
		Tid: tidDefault,

		Context: ctx,
	}
}

// NewListPrivacyLedgerEventsParamsWithHTTPClient creates a new ListPrivacyLedgerEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListPrivacyLedgerEventsParamsWithHTTPClient(client *http.Client) *ListPrivacyLedgerEventsParams {
	var (
		aidDefault = string("default")
		tidDefault = string("default")
	)
	return &ListPrivacyLedgerEventsParams{
		Aid:        aidDefault,
		Tid:        tidDefault,
		HTTPClient: client,
	}
}

/*ListPrivacyLedgerEventsParams contains all the parameters to send to the API endpoint
for the list privacy ledger events operation typically these are written to a http.Request
*/
type ListPrivacyLedgerEventsParams struct {

	/*Aid
	  Authorization server id

	*/
	Aid string
	/*From
	  Query events from timestamp (default 0)

	*/
	From *int64
	/*Tid
	  Tenant id

	*/
	Tid string
	/*To
	  Query events to timestamp (default current time)

	*/
	To *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list privacy ledger events params
func (o *ListPrivacyLedgerEventsParams) WithTimeout(timeout time.Duration) *ListPrivacyLedgerEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list privacy ledger events params
func (o *ListPrivacyLedgerEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list privacy ledger events params
func (o *ListPrivacyLedgerEventsParams) WithContext(ctx context.Context) *ListPrivacyLedgerEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list privacy ledger events params
func (o *ListPrivacyLedgerEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list privacy ledger events params
func (o *ListPrivacyLedgerEventsParams) WithHTTPClient(client *http.Client) *ListPrivacyLedgerEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list privacy ledger events params
func (o *ListPrivacyLedgerEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAid adds the aid to the list privacy ledger events params
func (o *ListPrivacyLedgerEventsParams) WithAid(aid string) *ListPrivacyLedgerEventsParams {
	o.SetAid(aid)
	return o
}

// SetAid adds the aid to the list privacy ledger events params
func (o *ListPrivacyLedgerEventsParams) SetAid(aid string) {
	o.Aid = aid
}

// WithFrom adds the from to the list privacy ledger events params
func (o *ListPrivacyLedgerEventsParams) WithFrom(from *int64) *ListPrivacyLedgerEventsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the list privacy ledger events params
func (o *ListPrivacyLedgerEventsParams) SetFrom(from *int64) {
	o.From = from
}

// WithTid adds the tid to the list privacy ledger events params
func (o *ListPrivacyLedgerEventsParams) WithTid(tid string) *ListPrivacyLedgerEventsParams {
	o.SetTid(tid)
	return o
}

// SetTid adds the tid to the list privacy ledger events params
func (o *ListPrivacyLedgerEventsParams) SetTid(tid string) {
	o.Tid = tid
}

// WithTo adds the to to the list privacy ledger events params
func (o *ListPrivacyLedgerEventsParams) WithTo(to *int64) *ListPrivacyLedgerEventsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the list privacy ledger events params
func (o *ListPrivacyLedgerEventsParams) SetTo(to *int64) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *ListPrivacyLedgerEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param aid
	if err := r.SetPathParam("aid", o.Aid); err != nil {
		return err
	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	// path param tid
	if err := r.SetPathParam("tid", o.Tid); err != nil {
		return err
	}

	if o.To != nil {

		// query param to
		var qrTo int64
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := swag.FormatInt64(qrTo)
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
