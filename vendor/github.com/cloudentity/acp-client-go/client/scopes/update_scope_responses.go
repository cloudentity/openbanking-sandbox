// Code generated by go-swagger; DO NOT EDIT.

package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// UpdateScopeReader is a Reader for the UpdateScope structure.
type UpdateScopeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateScopeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateScopeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateScopeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateScopeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateScopeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateScopeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateScopeUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateScopeOK creates a UpdateScopeOK with default headers values
func NewUpdateScopeOK() *UpdateScopeOK {
	return &UpdateScopeOK{}
}

/*UpdateScopeOK handles this case with default header values.

Scope
*/
type UpdateScopeOK struct {
	Payload *models.Scope
}

func (o *UpdateScopeOK) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/scopes/{scp}][%d] updateScopeOK  %+v", 200, o.Payload)
}

func (o *UpdateScopeOK) GetPayload() *models.Scope {
	return o.Payload
}

func (o *UpdateScopeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Scope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScopeBadRequest creates a UpdateScopeBadRequest with default headers values
func NewUpdateScopeBadRequest() *UpdateScopeBadRequest {
	return &UpdateScopeBadRequest{}
}

/*UpdateScopeBadRequest handles this case with default header values.

HttpError
*/
type UpdateScopeBadRequest struct {
	Payload *models.Error
}

func (o *UpdateScopeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/scopes/{scp}][%d] updateScopeBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateScopeBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateScopeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScopeUnauthorized creates a UpdateScopeUnauthorized with default headers values
func NewUpdateScopeUnauthorized() *UpdateScopeUnauthorized {
	return &UpdateScopeUnauthorized{}
}

/*UpdateScopeUnauthorized handles this case with default header values.

HttpError
*/
type UpdateScopeUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateScopeUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/scopes/{scp}][%d] updateScopeUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateScopeUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateScopeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScopeForbidden creates a UpdateScopeForbidden with default headers values
func NewUpdateScopeForbidden() *UpdateScopeForbidden {
	return &UpdateScopeForbidden{}
}

/*UpdateScopeForbidden handles this case with default header values.

HttpError
*/
type UpdateScopeForbidden struct {
	Payload *models.Error
}

func (o *UpdateScopeForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/scopes/{scp}][%d] updateScopeForbidden  %+v", 403, o.Payload)
}

func (o *UpdateScopeForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateScopeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScopeNotFound creates a UpdateScopeNotFound with default headers values
func NewUpdateScopeNotFound() *UpdateScopeNotFound {
	return &UpdateScopeNotFound{}
}

/*UpdateScopeNotFound handles this case with default header values.

HttpError
*/
type UpdateScopeNotFound struct {
	Payload *models.Error
}

func (o *UpdateScopeNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/scopes/{scp}][%d] updateScopeNotFound  %+v", 404, o.Payload)
}

func (o *UpdateScopeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateScopeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScopeUnprocessableEntity creates a UpdateScopeUnprocessableEntity with default headers values
func NewUpdateScopeUnprocessableEntity() *UpdateScopeUnprocessableEntity {
	return &UpdateScopeUnprocessableEntity{}
}

/*UpdateScopeUnprocessableEntity handles this case with default header values.

HttpError
*/
type UpdateScopeUnprocessableEntity struct {
	Payload *models.Error
}

func (o *UpdateScopeUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/scopes/{scp}][%d] updateScopeUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateScopeUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateScopeUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
