// Code generated by go-swagger; DO NOT EDIT.

package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// CreateScopeReader is a Reader for the CreateScope structure.
type CreateScopeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateScopeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateScopeCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateScopeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateScopeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateScopeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateScopeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateScopeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateScopeUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateScopeCreated creates a CreateScopeCreated with default headers values
func NewCreateScopeCreated() *CreateScopeCreated {
	return &CreateScopeCreated{}
}

/*CreateScopeCreated handles this case with default header values.

Scope
*/
type CreateScopeCreated struct {
	Payload *models.Scope
}

func (o *CreateScopeCreated) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/scopes][%d] createScopeCreated  %+v", 201, o.Payload)
}

func (o *CreateScopeCreated) GetPayload() *models.Scope {
	return o.Payload
}

func (o *CreateScopeCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Scope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScopeBadRequest creates a CreateScopeBadRequest with default headers values
func NewCreateScopeBadRequest() *CreateScopeBadRequest {
	return &CreateScopeBadRequest{}
}

/*CreateScopeBadRequest handles this case with default header values.

HttpError
*/
type CreateScopeBadRequest struct {
	Payload *models.Error
}

func (o *CreateScopeBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/scopes][%d] createScopeBadRequest  %+v", 400, o.Payload)
}

func (o *CreateScopeBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScopeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScopeUnauthorized creates a CreateScopeUnauthorized with default headers values
func NewCreateScopeUnauthorized() *CreateScopeUnauthorized {
	return &CreateScopeUnauthorized{}
}

/*CreateScopeUnauthorized handles this case with default header values.

HttpError
*/
type CreateScopeUnauthorized struct {
	Payload *models.Error
}

func (o *CreateScopeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/scopes][%d] createScopeUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateScopeUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScopeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScopeForbidden creates a CreateScopeForbidden with default headers values
func NewCreateScopeForbidden() *CreateScopeForbidden {
	return &CreateScopeForbidden{}
}

/*CreateScopeForbidden handles this case with default header values.

HttpError
*/
type CreateScopeForbidden struct {
	Payload *models.Error
}

func (o *CreateScopeForbidden) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/scopes][%d] createScopeForbidden  %+v", 403, o.Payload)
}

func (o *CreateScopeForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScopeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScopeNotFound creates a CreateScopeNotFound with default headers values
func NewCreateScopeNotFound() *CreateScopeNotFound {
	return &CreateScopeNotFound{}
}

/*CreateScopeNotFound handles this case with default header values.

HttpError
*/
type CreateScopeNotFound struct {
	Payload *models.Error
}

func (o *CreateScopeNotFound) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/scopes][%d] createScopeNotFound  %+v", 404, o.Payload)
}

func (o *CreateScopeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScopeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScopeConflict creates a CreateScopeConflict with default headers values
func NewCreateScopeConflict() *CreateScopeConflict {
	return &CreateScopeConflict{}
}

/*CreateScopeConflict handles this case with default header values.

HttpError
*/
type CreateScopeConflict struct {
	Payload *models.Error
}

func (o *CreateScopeConflict) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/scopes][%d] createScopeConflict  %+v", 409, o.Payload)
}

func (o *CreateScopeConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScopeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScopeUnprocessableEntity creates a CreateScopeUnprocessableEntity with default headers values
func NewCreateScopeUnprocessableEntity() *CreateScopeUnprocessableEntity {
	return &CreateScopeUnprocessableEntity{}
}

/*CreateScopeUnprocessableEntity handles this case with default header values.

HttpError
*/
type CreateScopeUnprocessableEntity struct {
	Payload *models.Error
}

func (o *CreateScopeUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/scopes][%d] createScopeUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateScopeUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScopeUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
