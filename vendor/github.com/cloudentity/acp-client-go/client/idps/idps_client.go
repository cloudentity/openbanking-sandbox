// Code generated by go-swagger; DO NOT EDIT.

package idps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new idps API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for idps API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAzureB2CIDP(params *CreateAzureB2CIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAzureB2CIDPCreated, error)

	CreateAzureIDP(params *CreateAzureIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAzureIDPCreated, error)

	CreateCognitoIDP(params *CreateCognitoIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCognitoIDPCreated, error)

	CreateCustomIDP(params *CreateCustomIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCustomIDPCreated, error)

	CreateGithubIDP(params *CreateGithubIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateGithubIDPCreated, error)

	CreateIntelliTrustIDP(params *CreateIntelliTrustIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateIntelliTrustIDPCreated, error)

	CreateOIDCIDP(params *CreateOIDCIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOIDCIDPCreated, error)

	CreateOktaIDP(params *CreateOktaIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOktaIDPCreated, error)

	CreateSAMLIDP(params *CreateSAMLIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSAMLIDPCreated, error)

	CreateStaticIDP(params *CreateStaticIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateStaticIDPCreated, error)

	DeleteIDP(params *DeleteIDPParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIDPNoContent, error)

	GetAzureB2CIDP(params *GetAzureB2CIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureB2CIDPOK, error)

	GetAzureIDP(params *GetAzureIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureIDPOK, error)

	GetCognitoIDP(params *GetCognitoIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetCognitoIDPOK, error)

	GetCustomIDP(params *GetCustomIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomIDPOK, error)

	GetGithubIDP(params *GetGithubIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetGithubIDPOK, error)

	GetIntelliTrustIDP(params *GetIntelliTrustIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntelliTrustIDPOK, error)

	GetOIDCIDP(params *GetOIDCIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetOIDCIDPOK, error)

	GetOktaIDP(params *GetOktaIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetOktaIDPOK, error)

	GetSAMLIDP(params *GetSAMLIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetSAMLIDPOK, error)

	GetStaticIDP(params *GetStaticIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetStaticIDPOK, error)

	ListIDPs(params *ListIDPsParams, authInfo runtime.ClientAuthInfoWriter) (*ListIDPsOK, error)

	UpdateAzureB2CIDP(params *UpdateAzureB2CIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAzureB2CIDPOK, error)

	UpdateAzureIDP(params *UpdateAzureIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAzureIDPOK, error)

	UpdateCognitoIDP(params *UpdateCognitoIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCognitoIDPOK, error)

	UpdateCustomIDP(params *UpdateCustomIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomIDPOK, error)

	UpdateGithubIDP(params *UpdateGithubIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGithubIDPOK, error)

	UpdateIntelliTrustIDP(params *UpdateIntelliTrustIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateIntelliTrustIDPOK, error)

	UpdateOIDCIDP(params *UpdateOIDCIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOIDCIDPOK, error)

	UpdateOktaIDP(params *UpdateOktaIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOktaIDPOK, error)

	UpdateSAMLIDP(params *UpdateSAMLIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSAMLIDPOK, error)

	UpdateStaticIDP(params *UpdateStaticIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStaticIDPOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAzureB2CIDP creates azure b2 c ID p

  Create AzureB2C IDP.
*/
func (a *Client) CreateAzureB2CIDP(params *CreateAzureB2CIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAzureB2CIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureB2CIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAzureB2CIDP",
		Method:             "POST",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/azureb2c",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAzureB2CIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureB2CIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAzureB2CIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAzureIDP creates azure ID p

  Create Azure IDP.
*/
func (a *Client) CreateAzureIDP(params *CreateAzureIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAzureIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAzureIDP",
		Method:             "POST",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/azure",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAzureIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAzureIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCognitoIDP creates cognito ID p

  Create Cognito IDP.
*/
func (a *Client) CreateCognitoIDP(params *CreateCognitoIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCognitoIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCognitoIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCognitoIDP",
		Method:             "POST",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/cognito",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCognitoIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCognitoIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCognitoIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCustomIDP creates custom ID p

  Create Custom IDP.
*/
func (a *Client) CreateCustomIDP(params *CreateCustomIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCustomIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCustomIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCustomIDP",
		Method:             "POST",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/custom",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCustomIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCustomIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCustomIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateGithubIDP creates github ID p

  Create Github IDP.
*/
func (a *Client) CreateGithubIDP(params *CreateGithubIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateGithubIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGithubIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createGithubIDP",
		Method:             "POST",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/github",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGithubIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGithubIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGithubIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateIntelliTrustIDP creates intelli trust ID p

  Create IntelliTrust IDP.
*/
func (a *Client) CreateIntelliTrustIDP(params *CreateIntelliTrustIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateIntelliTrustIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIntelliTrustIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createIntelliTrustIDP",
		Method:             "POST",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/intelli_trust",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIntelliTrustIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIntelliTrustIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createIntelliTrustIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOIDCIDP creates o ID c ID p

  Create OIDC IDP.
*/
func (a *Client) CreateOIDCIDP(params *CreateOIDCIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOIDCIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOIDCIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOIDCIDP",
		Method:             "POST",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/oidc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOIDCIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOIDCIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOIDCIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOktaIDP creates okta ID p

  Create Okta IDP.
*/
func (a *Client) CreateOktaIDP(params *CreateOktaIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOktaIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOktaIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOktaIDP",
		Method:             "POST",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/okta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOktaIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOktaIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOktaIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateSAMLIDP creates s a m l ID p

  Create SAML IDP.
*/
func (a *Client) CreateSAMLIDP(params *CreateSAMLIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSAMLIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSAMLIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSAMLIDP",
		Method:             "POST",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/saml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSAMLIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSAMLIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSAMLIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateStaticIDP creates static ID p

  Create Static IDP.
*/
func (a *Client) CreateStaticIDP(params *CreateStaticIDPParams, authInfo runtime.ClientAuthInfoWriter) (*CreateStaticIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStaticIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStaticIDP",
		Method:             "POST",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/static",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStaticIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStaticIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createStaticIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteIDP deletes ID p
*/
func (a *Client) DeleteIDP(params *DeleteIDPParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIDPNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIDP",
		Method:             "DELETE",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIDPNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAzureB2CIDP gets azure b2 c ID p

  Get AzureB2C IDP.
*/
func (a *Client) GetAzureB2CIDP(params *GetAzureB2CIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureB2CIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureB2CIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureB2CIDP",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/azureb2c/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureB2CIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureB2CIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureB2CIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAzureIDP gets azure ID p

  Get Azure IDP.
*/
func (a *Client) GetAzureIDP(params *GetAzureIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetAzureIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureIDP",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/azure/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCognitoIDP gets cognito ID p

  Get Cognito IDP.
*/
func (a *Client) GetCognitoIDP(params *GetCognitoIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetCognitoIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCognitoIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCognitoIDP",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/cognito/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCognitoIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCognitoIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCognitoIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCustomIDP gets custom ID p

  Get Custom IDP.
*/
func (a *Client) GetCustomIDP(params *GetCustomIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCustomIDP",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/custom/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCustomIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCustomIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGithubIDP gets github ID p

  Get Github IDP.
*/
func (a *Client) GetGithubIDP(params *GetGithubIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetGithubIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGithubIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGithubIDP",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/github/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGithubIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGithubIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGithubIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIntelliTrustIDP gets intelli trust ID p

  Get IntelliTrust IDP.
*/
func (a *Client) GetIntelliTrustIDP(params *GetIntelliTrustIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntelliTrustIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntelliTrustIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntelliTrustIDP",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/intelli_trust/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntelliTrustIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntelliTrustIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIntelliTrustIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOIDCIDP gets o ID c ID p

  Get OIDC IDP.
*/
func (a *Client) GetOIDCIDP(params *GetOIDCIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetOIDCIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOIDCIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOIDCIDP",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/oidc/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOIDCIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOIDCIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOIDCIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOktaIDP gets okta ID p

  Get Okta IDP.
*/
func (a *Client) GetOktaIDP(params *GetOktaIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetOktaIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOktaIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOktaIDP",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/okta/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOktaIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOktaIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOktaIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSAMLIDP gets s a m l ID p

  Get SAML IDP.
*/
func (a *Client) GetSAMLIDP(params *GetSAMLIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetSAMLIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSAMLIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSAMLIDP",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/saml/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSAMLIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSAMLIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSAMLIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStaticIDP gets static ID p

  Get Static IDP.
*/
func (a *Client) GetStaticIDP(params *GetStaticIDPParams, authInfo runtime.ClientAuthInfoWriter) (*GetStaticIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStaticIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStaticIDP",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/static/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStaticIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStaticIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStaticIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListIDPs List IDPs
*/
func (a *Client) ListIDPs(params *ListIDPsParams, authInfo runtime.ClientAuthInfoWriter) (*ListIDPsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIDPsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listIDPs",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIDPsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIDPsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listIDPs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAzureB2CIDP updates azure b2 c ID p

  Update AzureB2C IDP.
*/
func (a *Client) UpdateAzureB2CIDP(params *UpdateAzureB2CIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAzureB2CIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAzureB2CIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAzureB2CIDP",
		Method:             "PUT",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/azureb2c/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAzureB2CIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAzureB2CIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAzureB2CIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAzureIDP updates azure ID p

  Update Azure IDP.
*/
func (a *Client) UpdateAzureIDP(params *UpdateAzureIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAzureIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAzureIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAzureIDP",
		Method:             "PUT",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/azure/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAzureIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAzureIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAzureIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCognitoIDP updates cognito ID p

  Update Cognito IDP.
*/
func (a *Client) UpdateCognitoIDP(params *UpdateCognitoIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCognitoIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCognitoIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCognitoIDP",
		Method:             "PUT",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/cognito/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCognitoIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCognitoIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCognitoIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCustomIDP updates custom ID p

  Update Custom IDP.
*/
func (a *Client) UpdateCustomIDP(params *UpdateCustomIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCustomIDP",
		Method:             "PUT",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/custom/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCustomIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCustomIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGithubIDP updates github ID p

  Update Github IDP.
*/
func (a *Client) UpdateGithubIDP(params *UpdateGithubIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGithubIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGithubIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateGithubIDP",
		Method:             "PUT",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/github/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGithubIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGithubIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGithubIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateIntelliTrustIDP updates intelli trust ID p

  Update IntelliTrust IDP.
*/
func (a *Client) UpdateIntelliTrustIDP(params *UpdateIntelliTrustIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateIntelliTrustIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIntelliTrustIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateIntelliTrustIDP",
		Method:             "PUT",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/intelli_trust/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIntelliTrustIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIntelliTrustIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateIntelliTrustIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOIDCIDP updates o ID c ID p

  Update OIDC IDP.
*/
func (a *Client) UpdateOIDCIDP(params *UpdateOIDCIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOIDCIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOIDCIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateOIDCIDP",
		Method:             "PUT",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/oidc/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOIDCIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOIDCIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOIDCIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOktaIDP updates okta ID p

  Update Okta IDP.
*/
func (a *Client) UpdateOktaIDP(params *UpdateOktaIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOktaIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOktaIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateOktaIDP",
		Method:             "PUT",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/okta/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOktaIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOktaIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOktaIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSAMLIDP updates s a m l ID p

  Update SAML IDP.
*/
func (a *Client) UpdateSAMLIDP(params *UpdateSAMLIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSAMLIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSAMLIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSAMLIDP",
		Method:             "PUT",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/saml/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSAMLIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSAMLIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSAMLIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateStaticIDP updates static ID p

  Update Static IDP.
*/
func (a *Client) UpdateStaticIDP(params *UpdateStaticIDPParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStaticIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStaticIDPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateStaticIDP",
		Method:             "PUT",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/idps/static/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStaticIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStaticIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateStaticIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
