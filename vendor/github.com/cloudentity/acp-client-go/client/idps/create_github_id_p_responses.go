// Code generated by go-swagger; DO NOT EDIT.

package idps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// CreateGithubIDPReader is a Reader for the CreateGithubIDP structure.
type CreateGithubIDPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateGithubIDPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateGithubIDPCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateGithubIDPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateGithubIDPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateGithubIDPForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateGithubIDPNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateGithubIDPUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateGithubIDPCreated creates a CreateGithubIDPCreated with default headers values
func NewCreateGithubIDPCreated() *CreateGithubIDPCreated {
	return &CreateGithubIDPCreated{}
}

/*CreateGithubIDPCreated handles this case with default header values.

GithubIDP
*/
type CreateGithubIDPCreated struct {
	Payload *models.GithubIDP
}

func (o *CreateGithubIDPCreated) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/servers/{aid}/idps/github][%d] createGithubIdPCreated  %+v", 201, o.Payload)
}

func (o *CreateGithubIDPCreated) GetPayload() *models.GithubIDP {
	return o.Payload
}

func (o *CreateGithubIDPCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubIDP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGithubIDPBadRequest creates a CreateGithubIDPBadRequest with default headers values
func NewCreateGithubIDPBadRequest() *CreateGithubIDPBadRequest {
	return &CreateGithubIDPBadRequest{}
}

/*CreateGithubIDPBadRequest handles this case with default header values.

HttpError
*/
type CreateGithubIDPBadRequest struct {
	Payload *models.Error
}

func (o *CreateGithubIDPBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/servers/{aid}/idps/github][%d] createGithubIdPBadRequest  %+v", 400, o.Payload)
}

func (o *CreateGithubIDPBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateGithubIDPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGithubIDPUnauthorized creates a CreateGithubIDPUnauthorized with default headers values
func NewCreateGithubIDPUnauthorized() *CreateGithubIDPUnauthorized {
	return &CreateGithubIDPUnauthorized{}
}

/*CreateGithubIDPUnauthorized handles this case with default header values.

HttpError
*/
type CreateGithubIDPUnauthorized struct {
	Payload *models.Error
}

func (o *CreateGithubIDPUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/servers/{aid}/idps/github][%d] createGithubIdPUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateGithubIDPUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateGithubIDPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGithubIDPForbidden creates a CreateGithubIDPForbidden with default headers values
func NewCreateGithubIDPForbidden() *CreateGithubIDPForbidden {
	return &CreateGithubIDPForbidden{}
}

/*CreateGithubIDPForbidden handles this case with default header values.

HttpError
*/
type CreateGithubIDPForbidden struct {
	Payload *models.Error
}

func (o *CreateGithubIDPForbidden) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/servers/{aid}/idps/github][%d] createGithubIdPForbidden  %+v", 403, o.Payload)
}

func (o *CreateGithubIDPForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateGithubIDPForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGithubIDPNotFound creates a CreateGithubIDPNotFound with default headers values
func NewCreateGithubIDPNotFound() *CreateGithubIDPNotFound {
	return &CreateGithubIDPNotFound{}
}

/*CreateGithubIDPNotFound handles this case with default header values.

HttpError
*/
type CreateGithubIDPNotFound struct {
	Payload *models.Error
}

func (o *CreateGithubIDPNotFound) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/servers/{aid}/idps/github][%d] createGithubIdPNotFound  %+v", 404, o.Payload)
}

func (o *CreateGithubIDPNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateGithubIDPNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGithubIDPUnprocessableEntity creates a CreateGithubIDPUnprocessableEntity with default headers values
func NewCreateGithubIDPUnprocessableEntity() *CreateGithubIDPUnprocessableEntity {
	return &CreateGithubIDPUnprocessableEntity{}
}

/*CreateGithubIDPUnprocessableEntity handles this case with default header values.

HttpError
*/
type CreateGithubIDPUnprocessableEntity struct {
	Payload *models.Error
}

func (o *CreateGithubIDPUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /api/admin/{tid}/servers/{aid}/idps/github][%d] createGithubIdPUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateGithubIDPUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateGithubIDPUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
