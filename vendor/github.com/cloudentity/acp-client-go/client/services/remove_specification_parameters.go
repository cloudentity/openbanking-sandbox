// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRemoveSpecificationParams creates a new RemoveSpecificationParams object
// with the default values initialized.
func NewRemoveSpecificationParams() *RemoveSpecificationParams {
	var (
		tidDefault = string("default")
	)
	return &RemoveSpecificationParams{
		Tid: tidDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveSpecificationParamsWithTimeout creates a new RemoveSpecificationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRemoveSpecificationParamsWithTimeout(timeout time.Duration) *RemoveSpecificationParams {
	var (
		tidDefault = string("default")
	)
	return &RemoveSpecificationParams{
		Tid: tidDefault,

		timeout: timeout,
	}
}

// NewRemoveSpecificationParamsWithContext creates a new RemoveSpecificationParams object
// with the default values initialized, and the ability to set a context for a request
func NewRemoveSpecificationParamsWithContext(ctx context.Context) *RemoveSpecificationParams {
	var (
		tidDefault = string("default")
	)
	return &RemoveSpecificationParams{
		Tid: tidDefault,

		Context: ctx,
	}
}

// NewRemoveSpecificationParamsWithHTTPClient creates a new RemoveSpecificationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRemoveSpecificationParamsWithHTTPClient(client *http.Client) *RemoveSpecificationParams {
	var (
		tidDefault = string("default")
	)
	return &RemoveSpecificationParams{
		Tid:        tidDefault,
		HTTPClient: client,
	}
}

/*RemoveSpecificationParams contains all the parameters to send to the API endpoint
for the remove specification operation typically these are written to a http.Request
*/
type RemoveSpecificationParams struct {

	/*Sid*/
	Sid string
	/*Tid
	  Tenant id

	*/
	Tid string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the remove specification params
func (o *RemoveSpecificationParams) WithTimeout(timeout time.Duration) *RemoveSpecificationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove specification params
func (o *RemoveSpecificationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove specification params
func (o *RemoveSpecificationParams) WithContext(ctx context.Context) *RemoveSpecificationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove specification params
func (o *RemoveSpecificationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove specification params
func (o *RemoveSpecificationParams) WithHTTPClient(client *http.Client) *RemoveSpecificationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove specification params
func (o *RemoveSpecificationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSid adds the sid to the remove specification params
func (o *RemoveSpecificationParams) WithSid(sid string) *RemoveSpecificationParams {
	o.SetSid(sid)
	return o
}

// SetSid adds the sid to the remove specification params
func (o *RemoveSpecificationParams) SetSid(sid string) {
	o.Sid = sid
}

// WithTid adds the tid to the remove specification params
func (o *RemoveSpecificationParams) WithTid(tid string) *RemoveSpecificationParams {
	o.SetTid(tid)
	return o
}

// SetTid adds the tid to the remove specification params
func (o *RemoveSpecificationParams) SetTid(tid string) {
	o.Tid = tid
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveSpecificationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param sid
	if err := r.SetPathParam("sid", o.Sid); err != nil {
		return err
	}

	// path param tid
	if err := r.SetPathParam("tid", o.Tid); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
