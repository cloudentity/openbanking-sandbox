// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewImportSpecificationFromURLParams creates a new ImportSpecificationFromURLParams object
// with the default values initialized.
func NewImportSpecificationFromURLParams() *ImportSpecificationFromURLParams {
	var (
		tidDefault = string("default")
	)
	return &ImportSpecificationFromURLParams{
		Tid: tidDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewImportSpecificationFromURLParamsWithTimeout creates a new ImportSpecificationFromURLParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewImportSpecificationFromURLParamsWithTimeout(timeout time.Duration) *ImportSpecificationFromURLParams {
	var (
		tidDefault = string("default")
	)
	return &ImportSpecificationFromURLParams{
		Tid: tidDefault,

		timeout: timeout,
	}
}

// NewImportSpecificationFromURLParamsWithContext creates a new ImportSpecificationFromURLParams object
// with the default values initialized, and the ability to set a context for a request
func NewImportSpecificationFromURLParamsWithContext(ctx context.Context) *ImportSpecificationFromURLParams {
	var (
		tidDefault = string("default")
	)
	return &ImportSpecificationFromURLParams{
		Tid: tidDefault,

		Context: ctx,
	}
}

// NewImportSpecificationFromURLParamsWithHTTPClient creates a new ImportSpecificationFromURLParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewImportSpecificationFromURLParamsWithHTTPClient(client *http.Client) *ImportSpecificationFromURLParams {
	var (
		tidDefault = string("default")
	)
	return &ImportSpecificationFromURLParams{
		Tid:        tidDefault,
		HTTPClient: client,
	}
}

/*ImportSpecificationFromURLParams contains all the parameters to send to the API endpoint
for the import specification from URL operation typically these are written to a http.Request
*/
type ImportSpecificationFromURLParams struct {

	/*GatewayType*/
	GatewayType *string
	/*Sid*/
	Sid string
	/*Tid
	  Tenant id

	*/
	Tid string
	/*URL*/
	URL *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the import specification from URL params
func (o *ImportSpecificationFromURLParams) WithTimeout(timeout time.Duration) *ImportSpecificationFromURLParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import specification from URL params
func (o *ImportSpecificationFromURLParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import specification from URL params
func (o *ImportSpecificationFromURLParams) WithContext(ctx context.Context) *ImportSpecificationFromURLParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import specification from URL params
func (o *ImportSpecificationFromURLParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import specification from URL params
func (o *ImportSpecificationFromURLParams) WithHTTPClient(client *http.Client) *ImportSpecificationFromURLParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import specification from URL params
func (o *ImportSpecificationFromURLParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGatewayType adds the gatewayType to the import specification from URL params
func (o *ImportSpecificationFromURLParams) WithGatewayType(gatewayType *string) *ImportSpecificationFromURLParams {
	o.SetGatewayType(gatewayType)
	return o
}

// SetGatewayType adds the gatewayType to the import specification from URL params
func (o *ImportSpecificationFromURLParams) SetGatewayType(gatewayType *string) {
	o.GatewayType = gatewayType
}

// WithSid adds the sid to the import specification from URL params
func (o *ImportSpecificationFromURLParams) WithSid(sid string) *ImportSpecificationFromURLParams {
	o.SetSid(sid)
	return o
}

// SetSid adds the sid to the import specification from URL params
func (o *ImportSpecificationFromURLParams) SetSid(sid string) {
	o.Sid = sid
}

// WithTid adds the tid to the import specification from URL params
func (o *ImportSpecificationFromURLParams) WithTid(tid string) *ImportSpecificationFromURLParams {
	o.SetTid(tid)
	return o
}

// SetTid adds the tid to the import specification from URL params
func (o *ImportSpecificationFromURLParams) SetTid(tid string) {
	o.Tid = tid
}

// WithURL adds the url to the import specification from URL params
func (o *ImportSpecificationFromURLParams) WithURL(url *string) *ImportSpecificationFromURLParams {
	o.SetURL(url)
	return o
}

// SetURL adds the url to the import specification from URL params
func (o *ImportSpecificationFromURLParams) SetURL(url *string) {
	o.URL = url
}

// WriteToRequest writes these params to a swagger request
func (o *ImportSpecificationFromURLParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.GatewayType != nil {

		// query param gateway_type
		var qrGatewayType string
		if o.GatewayType != nil {
			qrGatewayType = *o.GatewayType
		}
		qGatewayType := qrGatewayType
		if qGatewayType != "" {
			if err := r.SetQueryParam("gateway_type", qGatewayType); err != nil {
				return err
			}
		}

	}

	// path param sid
	if err := r.SetPathParam("sid", o.Sid); err != nil {
		return err
	}

	// path param tid
	if err := r.SetPathParam("tid", o.Tid); err != nil {
		return err
	}

	if o.URL != nil {

		// form param url
		var frURL string
		if o.URL != nil {
			frURL = *o.URL
		}
		fURL := frURL
		if fURL != "" {
			if err := r.SetFormParam("url", fURL); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
