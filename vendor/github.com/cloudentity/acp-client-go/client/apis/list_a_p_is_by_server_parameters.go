// Code generated by go-swagger; DO NOT EDIT.

package apis

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListAPIsByServerParams creates a new ListAPIsByServerParams object
// with the default values initialized.
func NewListAPIsByServerParams() *ListAPIsByServerParams {
	var (
		aidDefault = string("default")
		tidDefault = string("default")
	)
	return &ListAPIsByServerParams{
		Aid: aidDefault,
		Tid: tidDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListAPIsByServerParamsWithTimeout creates a new ListAPIsByServerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListAPIsByServerParamsWithTimeout(timeout time.Duration) *ListAPIsByServerParams {
	var (
		aidDefault = string("default")
		tidDefault = string("default")
	)
	return &ListAPIsByServerParams{
		Aid: aidDefault,
		Tid: tidDefault,

		timeout: timeout,
	}
}

// NewListAPIsByServerParamsWithContext creates a new ListAPIsByServerParams object
// with the default values initialized, and the ability to set a context for a request
func NewListAPIsByServerParamsWithContext(ctx context.Context) *ListAPIsByServerParams {
	var (
		aidDefault = string("default")
		tidDefault = string("default")
	)
	return &ListAPIsByServerParams{
		Aid: aidDefault,
		Tid: tidDefault,

		Context: ctx,
	}
}

// NewListAPIsByServerParamsWithHTTPClient creates a new ListAPIsByServerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListAPIsByServerParamsWithHTTPClient(client *http.Client) *ListAPIsByServerParams {
	var (
		aidDefault = string("default")
		tidDefault = string("default")
	)
	return &ListAPIsByServerParams{
		Aid:        aidDefault,
		Tid:        tidDefault,
		HTTPClient: client,
	}
}

/*ListAPIsByServerParams contains all the parameters to send to the API endpoint
for the list a p is by server operation typically these are written to a http.Request
*/
type ListAPIsByServerParams struct {

	/*Aid
	  Server id

	*/
	Aid string
	/*DataClassification
	  List apis that have given data classifications

	*/
	DataClassification []string
	/*Tid
	  Tenant id

	*/
	Tid string
	/*WithoutDataClassifications
	  List apis that have no data classifications

	*/
	WithoutDataClassifications *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list a p is by server params
func (o *ListAPIsByServerParams) WithTimeout(timeout time.Duration) *ListAPIsByServerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list a p is by server params
func (o *ListAPIsByServerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list a p is by server params
func (o *ListAPIsByServerParams) WithContext(ctx context.Context) *ListAPIsByServerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list a p is by server params
func (o *ListAPIsByServerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list a p is by server params
func (o *ListAPIsByServerParams) WithHTTPClient(client *http.Client) *ListAPIsByServerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list a p is by server params
func (o *ListAPIsByServerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAid adds the aid to the list a p is by server params
func (o *ListAPIsByServerParams) WithAid(aid string) *ListAPIsByServerParams {
	o.SetAid(aid)
	return o
}

// SetAid adds the aid to the list a p is by server params
func (o *ListAPIsByServerParams) SetAid(aid string) {
	o.Aid = aid
}

// WithDataClassification adds the dataClassification to the list a p is by server params
func (o *ListAPIsByServerParams) WithDataClassification(dataClassification []string) *ListAPIsByServerParams {
	o.SetDataClassification(dataClassification)
	return o
}

// SetDataClassification adds the dataClassification to the list a p is by server params
func (o *ListAPIsByServerParams) SetDataClassification(dataClassification []string) {
	o.DataClassification = dataClassification
}

// WithTid adds the tid to the list a p is by server params
func (o *ListAPIsByServerParams) WithTid(tid string) *ListAPIsByServerParams {
	o.SetTid(tid)
	return o
}

// SetTid adds the tid to the list a p is by server params
func (o *ListAPIsByServerParams) SetTid(tid string) {
	o.Tid = tid
}

// WithWithoutDataClassifications adds the withoutDataClassifications to the list a p is by server params
func (o *ListAPIsByServerParams) WithWithoutDataClassifications(withoutDataClassifications *bool) *ListAPIsByServerParams {
	o.SetWithoutDataClassifications(withoutDataClassifications)
	return o
}

// SetWithoutDataClassifications adds the withoutDataClassifications to the list a p is by server params
func (o *ListAPIsByServerParams) SetWithoutDataClassifications(withoutDataClassifications *bool) {
	o.WithoutDataClassifications = withoutDataClassifications
}

// WriteToRequest writes these params to a swagger request
func (o *ListAPIsByServerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param aid
	if err := r.SetPathParam("aid", o.Aid); err != nil {
		return err
	}

	valuesDataClassification := o.DataClassification

	joinedDataClassification := swag.JoinByFormat(valuesDataClassification, "")
	// query array param data_classification
	if err := r.SetQueryParam("data_classification", joinedDataClassification...); err != nil {
		return err
	}

	// path param tid
	if err := r.SetPathParam("tid", o.Tid); err != nil {
		return err
	}

	if o.WithoutDataClassifications != nil {

		// query param without_data_classifications
		var qrWithoutDataClassifications bool
		if o.WithoutDataClassifications != nil {
			qrWithoutDataClassifications = *o.WithoutDataClassifications
		}
		qWithoutDataClassifications := swag.FormatBool(qrWithoutDataClassifications)
		if qWithoutDataClassifications != "" {
			if err := r.SetQueryParam("without_data_classifications", qWithoutDataClassifications); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
