// Code generated by go-swagger; DO NOT EDIT.

package oauth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewWellKnownParams creates a new WellKnownParams object
// with the default values initialized.
func NewWellKnownParams() *WellKnownParams {
	var (
		aidDefault = string("default")
		tidDefault = string("default")
	)
	return &WellKnownParams{
		Aid: aidDefault,
		Tid: tidDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewWellKnownParamsWithTimeout creates a new WellKnownParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewWellKnownParamsWithTimeout(timeout time.Duration) *WellKnownParams {
	var (
		aidDefault = string("default")
		tidDefault = string("default")
	)
	return &WellKnownParams{
		Aid: aidDefault,
		Tid: tidDefault,

		timeout: timeout,
	}
}

// NewWellKnownParamsWithContext creates a new WellKnownParams object
// with the default values initialized, and the ability to set a context for a request
func NewWellKnownParamsWithContext(ctx context.Context) *WellKnownParams {
	var (
		aidDefault = string("default")
		tidDefault = string("default")
	)
	return &WellKnownParams{
		Aid: aidDefault,
		Tid: tidDefault,

		Context: ctx,
	}
}

// NewWellKnownParamsWithHTTPClient creates a new WellKnownParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewWellKnownParamsWithHTTPClient(client *http.Client) *WellKnownParams {
	var (
		aidDefault = string("default")
		tidDefault = string("default")
	)
	return &WellKnownParams{
		Aid:        aidDefault,
		Tid:        tidDefault,
		HTTPClient: client,
	}
}

/*WellKnownParams contains all the parameters to send to the API endpoint
for the well known operation typically these are written to a http.Request
*/
type WellKnownParams struct {

	/*Aid
	  Authorization server id

	*/
	Aid string
	/*Tid
	  Tenant id

	*/
	Tid string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the well known params
func (o *WellKnownParams) WithTimeout(timeout time.Duration) *WellKnownParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the well known params
func (o *WellKnownParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the well known params
func (o *WellKnownParams) WithContext(ctx context.Context) *WellKnownParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the well known params
func (o *WellKnownParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the well known params
func (o *WellKnownParams) WithHTTPClient(client *http.Client) *WellKnownParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the well known params
func (o *WellKnownParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAid adds the aid to the well known params
func (o *WellKnownParams) WithAid(aid string) *WellKnownParams {
	o.SetAid(aid)
	return o
}

// SetAid adds the aid to the well known params
func (o *WellKnownParams) SetAid(aid string) {
	o.Aid = aid
}

// WithTid adds the tid to the well known params
func (o *WellKnownParams) WithTid(tid string) *WellKnownParams {
	o.SetTid(tid)
	return o
}

// SetTid adds the tid to the well known params
func (o *WellKnownParams) SetTid(tid string) {
	o.Tid = tid
}

// WriteToRequest writes these params to a swagger request
func (o *WellKnownParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param aid
	if err := r.SetPathParam("aid", o.Aid); err != nil {
		return err
	}

	// path param tid
	if err := r.SetPathParam("tid", o.Tid); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
