// Code generated by go-swagger; DO NOT EDIT.

package oauth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// GatewayIntrospectReader is a Reader for the GatewayIntrospect structure.
type GatewayIntrospectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GatewayIntrospectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGatewayIntrospectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGatewayIntrospectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGatewayIntrospectUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGatewayIntrospectOK creates a GatewayIntrospectOK with default headers values
func NewGatewayIntrospectOK() *GatewayIntrospectOK {
	return &GatewayIntrospectOK{}
}

/*GatewayIntrospectOK handles this case with default header values.

IntrospectResponse
*/
type GatewayIntrospectOK struct {
	Payload *models.IntrospectResponse
}

func (o *GatewayIntrospectOK) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/gateways/introspect][%d] gatewayIntrospectOK  %+v", 200, o.Payload)
}

func (o *GatewayIntrospectOK) GetPayload() *models.IntrospectResponse {
	return o.Payload
}

func (o *GatewayIntrospectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IntrospectResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGatewayIntrospectBadRequest creates a GatewayIntrospectBadRequest with default headers values
func NewGatewayIntrospectBadRequest() *GatewayIntrospectBadRequest {
	return &GatewayIntrospectBadRequest{}
}

/*GatewayIntrospectBadRequest handles this case with default header values.

HttpError
*/
type GatewayIntrospectBadRequest struct {
	Payload *models.Error
}

func (o *GatewayIntrospectBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/gateways/introspect][%d] gatewayIntrospectBadRequest  %+v", 400, o.Payload)
}

func (o *GatewayIntrospectBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GatewayIntrospectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGatewayIntrospectUnprocessableEntity creates a GatewayIntrospectUnprocessableEntity with default headers values
func NewGatewayIntrospectUnprocessableEntity() *GatewayIntrospectUnprocessableEntity {
	return &GatewayIntrospectUnprocessableEntity{}
}

/*GatewayIntrospectUnprocessableEntity handles this case with default header values.

HttpError
*/
type GatewayIntrospectUnprocessableEntity struct {
	Payload *models.Error
}

func (o *GatewayIntrospectUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/gateways/introspect][%d] gatewayIntrospectUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GatewayIntrospectUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *GatewayIntrospectUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
