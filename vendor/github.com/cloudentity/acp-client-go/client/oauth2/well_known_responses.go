// Code generated by go-swagger; DO NOT EDIT.

package oauth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// WellKnownReader is a Reader for the WellKnown structure.
type WellKnownReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WellKnownReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWellKnownOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewWellKnownNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewWellKnownOK creates a WellKnownOK with default headers values
func NewWellKnownOK() *WellKnownOK {
	return &WellKnownOK{}
}

/*WellKnownOK handles this case with default header values.

wellKnown
*/
type WellKnownOK struct {
	Payload *models.WellKnown
}

func (o *WellKnownOK) Error() string {
	return fmt.Sprintf("[GET /{tid}/{aid}/.well-known/openid-configuration][%d] wellKnownOK  %+v", 200, o.Payload)
}

func (o *WellKnownOK) GetPayload() *models.WellKnown {
	return o.Payload
}

func (o *WellKnownOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WellKnown)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWellKnownNotFound creates a WellKnownNotFound with default headers values
func NewWellKnownNotFound() *WellKnownNotFound {
	return &WellKnownNotFound{}
}

/*WellKnownNotFound handles this case with default header values.

genericError
*/
type WellKnownNotFound struct {
	Payload *models.GenericError
}

func (o *WellKnownNotFound) Error() string {
	return fmt.Sprintf("[GET /{tid}/{aid}/.well-known/openid-configuration][%d] wellKnownNotFound  %+v", 404, o.Payload)
}

func (o *WellKnownNotFound) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *WellKnownNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
