// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// UpdateClientForDeveloperReader is a Reader for the UpdateClientForDeveloper structure.
type UpdateClientForDeveloperReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateClientForDeveloperReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateClientForDeveloperOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateClientForDeveloperBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateClientForDeveloperUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateClientForDeveloperForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateClientForDeveloperNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateClientForDeveloperUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateClientForDeveloperOK creates a UpdateClientForDeveloperOK with default headers values
func NewUpdateClientForDeveloperOK() *UpdateClientForDeveloperOK {
	return &UpdateClientForDeveloperOK{}
}

/*UpdateClientForDeveloperOK handles this case with default header values.

ClientDeveloperResponse
*/
type UpdateClientForDeveloperOK struct {
	Payload *models.ClientDeveloperResponse
}

func (o *UpdateClientForDeveloperOK) Error() string {
	return fmt.Sprintf("[PUT /api/developer/{tid}/{aid}/clients/{cid}][%d] updateClientForDeveloperOK  %+v", 200, o.Payload)
}

func (o *UpdateClientForDeveloperOK) GetPayload() *models.ClientDeveloperResponse {
	return o.Payload
}

func (o *UpdateClientForDeveloperOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ClientDeveloperResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClientForDeveloperBadRequest creates a UpdateClientForDeveloperBadRequest with default headers values
func NewUpdateClientForDeveloperBadRequest() *UpdateClientForDeveloperBadRequest {
	return &UpdateClientForDeveloperBadRequest{}
}

/*UpdateClientForDeveloperBadRequest handles this case with default header values.

HttpError
*/
type UpdateClientForDeveloperBadRequest struct {
	Payload *models.Error
}

func (o *UpdateClientForDeveloperBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/developer/{tid}/{aid}/clients/{cid}][%d] updateClientForDeveloperBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateClientForDeveloperBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClientForDeveloperBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClientForDeveloperUnauthorized creates a UpdateClientForDeveloperUnauthorized with default headers values
func NewUpdateClientForDeveloperUnauthorized() *UpdateClientForDeveloperUnauthorized {
	return &UpdateClientForDeveloperUnauthorized{}
}

/*UpdateClientForDeveloperUnauthorized handles this case with default header values.

HttpError
*/
type UpdateClientForDeveloperUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateClientForDeveloperUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/developer/{tid}/{aid}/clients/{cid}][%d] updateClientForDeveloperUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateClientForDeveloperUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClientForDeveloperUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClientForDeveloperForbidden creates a UpdateClientForDeveloperForbidden with default headers values
func NewUpdateClientForDeveloperForbidden() *UpdateClientForDeveloperForbidden {
	return &UpdateClientForDeveloperForbidden{}
}

/*UpdateClientForDeveloperForbidden handles this case with default header values.

HttpError
*/
type UpdateClientForDeveloperForbidden struct {
	Payload *models.Error
}

func (o *UpdateClientForDeveloperForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/developer/{tid}/{aid}/clients/{cid}][%d] updateClientForDeveloperForbidden  %+v", 403, o.Payload)
}

func (o *UpdateClientForDeveloperForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClientForDeveloperForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClientForDeveloperNotFound creates a UpdateClientForDeveloperNotFound with default headers values
func NewUpdateClientForDeveloperNotFound() *UpdateClientForDeveloperNotFound {
	return &UpdateClientForDeveloperNotFound{}
}

/*UpdateClientForDeveloperNotFound handles this case with default header values.

HttpError
*/
type UpdateClientForDeveloperNotFound struct {
	Payload *models.Error
}

func (o *UpdateClientForDeveloperNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/developer/{tid}/{aid}/clients/{cid}][%d] updateClientForDeveloperNotFound  %+v", 404, o.Payload)
}

func (o *UpdateClientForDeveloperNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClientForDeveloperNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClientForDeveloperUnprocessableEntity creates a UpdateClientForDeveloperUnprocessableEntity with default headers values
func NewUpdateClientForDeveloperUnprocessableEntity() *UpdateClientForDeveloperUnprocessableEntity {
	return &UpdateClientForDeveloperUnprocessableEntity{}
}

/*UpdateClientForDeveloperUnprocessableEntity handles this case with default header values.

HttpError
*/
type UpdateClientForDeveloperUnprocessableEntity struct {
	Payload *models.Error
}

func (o *UpdateClientForDeveloperUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/developer/{tid}/{aid}/clients/{cid}][%d] updateClientForDeveloperUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateClientForDeveloperUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClientForDeveloperUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
