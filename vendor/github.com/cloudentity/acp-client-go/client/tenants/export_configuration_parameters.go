// Code generated by go-swagger; DO NOT EDIT.

package tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewExportConfigurationParams creates a new ExportConfigurationParams object
// with the default values initialized.
func NewExportConfigurationParams() *ExportConfigurationParams {
	var (
		tidDefault = string("default")
	)
	return &ExportConfigurationParams{
		Tid: &tidDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewExportConfigurationParamsWithTimeout creates a new ExportConfigurationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewExportConfigurationParamsWithTimeout(timeout time.Duration) *ExportConfigurationParams {
	var (
		tidDefault = string("default")
	)
	return &ExportConfigurationParams{
		Tid: &tidDefault,

		timeout: timeout,
	}
}

// NewExportConfigurationParamsWithContext creates a new ExportConfigurationParams object
// with the default values initialized, and the ability to set a context for a request
func NewExportConfigurationParamsWithContext(ctx context.Context) *ExportConfigurationParams {
	var (
		tidDefault = string("default")
	)
	return &ExportConfigurationParams{
		Tid: &tidDefault,

		Context: ctx,
	}
}

// NewExportConfigurationParamsWithHTTPClient creates a new ExportConfigurationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewExportConfigurationParamsWithHTTPClient(client *http.Client) *ExportConfigurationParams {
	var (
		tidDefault = string("default")
	)
	return &ExportConfigurationParams{
		Tid:        &tidDefault,
		HTTPClient: client,
	}
}

/*ExportConfigurationParams contains all the parameters to send to the API endpoint
for the export configuration operation typically these are written to a http.Request
*/
type ExportConfigurationParams struct {

	/*Tid
	  Tenant id

	*/
	Tid *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the export configuration params
func (o *ExportConfigurationParams) WithTimeout(timeout time.Duration) *ExportConfigurationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the export configuration params
func (o *ExportConfigurationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the export configuration params
func (o *ExportConfigurationParams) WithContext(ctx context.Context) *ExportConfigurationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the export configuration params
func (o *ExportConfigurationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the export configuration params
func (o *ExportConfigurationParams) WithHTTPClient(client *http.Client) *ExportConfigurationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the export configuration params
func (o *ExportConfigurationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTid adds the tid to the export configuration params
func (o *ExportConfigurationParams) WithTid(tid *string) *ExportConfigurationParams {
	o.SetTid(tid)
	return o
}

// SetTid adds the tid to the export configuration params
func (o *ExportConfigurationParams) SetTid(tid *string) {
	o.Tid = tid
}

// WriteToRequest writes these params to a swagger request
func (o *ExportConfigurationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Tid != nil {

		// query param tid
		var qrTid string
		if o.Tid != nil {
			qrTid = *o.Tid
		}
		qTid := qrTid
		if qTid != "" {
			if err := r.SetQueryParam("tid", qTid); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
