// Code generated by go-swagger; DO NOT EDIT.

package logins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// RejectLoginRequestReader is a Reader for the RejectLoginRequest structure.
type RejectLoginRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RejectLoginRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRejectLoginRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRejectLoginRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRejectLoginRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRejectLoginRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRejectLoginRequestOK creates a RejectLoginRequestOK with default headers values
func NewRejectLoginRequestOK() *RejectLoginRequestOK {
	return &RejectLoginRequestOK{}
}

/*RejectLoginRequestOK handles this case with default header values.

LoginRejected
*/
type RejectLoginRequestOK struct {
	Payload *models.LoginRejected
}

func (o *RejectLoginRequestOK) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/logins/{login}/reject][%d] rejectLoginRequestOK  %+v", 200, o.Payload)
}

func (o *RejectLoginRequestOK) GetPayload() *models.LoginRejected {
	return o.Payload
}

func (o *RejectLoginRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LoginRejected)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectLoginRequestUnauthorized creates a RejectLoginRequestUnauthorized with default headers values
func NewRejectLoginRequestUnauthorized() *RejectLoginRequestUnauthorized {
	return &RejectLoginRequestUnauthorized{}
}

/*RejectLoginRequestUnauthorized handles this case with default header values.

HttpError
*/
type RejectLoginRequestUnauthorized struct {
	Payload *models.Error
}

func (o *RejectLoginRequestUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/logins/{login}/reject][%d] rejectLoginRequestUnauthorized  %+v", 401, o.Payload)
}

func (o *RejectLoginRequestUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectLoginRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectLoginRequestForbidden creates a RejectLoginRequestForbidden with default headers values
func NewRejectLoginRequestForbidden() *RejectLoginRequestForbidden {
	return &RejectLoginRequestForbidden{}
}

/*RejectLoginRequestForbidden handles this case with default header values.

HttpError
*/
type RejectLoginRequestForbidden struct {
	Payload *models.Error
}

func (o *RejectLoginRequestForbidden) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/logins/{login}/reject][%d] rejectLoginRequestForbidden  %+v", 403, o.Payload)
}

func (o *RejectLoginRequestForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectLoginRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectLoginRequestNotFound creates a RejectLoginRequestNotFound with default headers values
func NewRejectLoginRequestNotFound() *RejectLoginRequestNotFound {
	return &RejectLoginRequestNotFound{}
}

/*RejectLoginRequestNotFound handles this case with default header values.

HttpError
*/
type RejectLoginRequestNotFound struct {
	Payload *models.Error
}

func (o *RejectLoginRequestNotFound) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/logins/{login}/reject][%d] rejectLoginRequestNotFound  %+v", 404, o.Payload)
}

func (o *RejectLoginRequestNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectLoginRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
