// Code generated by go-swagger; DO NOT EDIT.

package openbanking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// GetAccountAccessConsentRequestReader is a Reader for the GetAccountAccessConsentRequest structure.
type GetAccountAccessConsentRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccountAccessConsentRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewGetAccountAccessConsentRequestCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAccountAccessConsentRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAccountAccessConsentRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAccountAccessConsentRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAccountAccessConsentRequestMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetAccountAccessConsentRequestNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAccountAccessConsentRequestUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAccountAccessConsentRequestTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAccountAccessConsentRequestInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAccountAccessConsentRequestCreated creates a GetAccountAccessConsentRequestCreated with default headers values
func NewGetAccountAccessConsentRequestCreated() *GetAccountAccessConsentRequestCreated {
	return &GetAccountAccessConsentRequestCreated{}
}

/*GetAccountAccessConsentRequestCreated handles this case with default header values.

AccountAccessConsentResponse
*/
type GetAccountAccessConsentRequestCreated struct {
	Payload *models.AccountAccessConsentResponse
}

func (o *GetAccountAccessConsentRequestCreated) Error() string {
	return fmt.Sprintf("[GET /{tid}/{aid}/open-banking/v3.1/aisp/account-access-consents/{consentID}][%d] getAccountAccessConsentRequestCreated  %+v", 201, o.Payload)
}

func (o *GetAccountAccessConsentRequestCreated) GetPayload() *models.AccountAccessConsentResponse {
	return o.Payload
}

func (o *GetAccountAccessConsentRequestCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccountAccessConsentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountAccessConsentRequestBadRequest creates a GetAccountAccessConsentRequestBadRequest with default headers values
func NewGetAccountAccessConsentRequestBadRequest() *GetAccountAccessConsentRequestBadRequest {
	return &GetAccountAccessConsentRequestBadRequest{}
}

/*GetAccountAccessConsentRequestBadRequest handles this case with default header values.

ErrorResponse
*/
type GetAccountAccessConsentRequestBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetAccountAccessConsentRequestBadRequest) Error() string {
	return fmt.Sprintf("[GET /{tid}/{aid}/open-banking/v3.1/aisp/account-access-consents/{consentID}][%d] getAccountAccessConsentRequestBadRequest  %+v", 400, o.Payload)
}

func (o *GetAccountAccessConsentRequestBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAccountAccessConsentRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountAccessConsentRequestUnauthorized creates a GetAccountAccessConsentRequestUnauthorized with default headers values
func NewGetAccountAccessConsentRequestUnauthorized() *GetAccountAccessConsentRequestUnauthorized {
	return &GetAccountAccessConsentRequestUnauthorized{}
}

/*GetAccountAccessConsentRequestUnauthorized handles this case with default header values.

ErrorResponse
*/
type GetAccountAccessConsentRequestUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *GetAccountAccessConsentRequestUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{tid}/{aid}/open-banking/v3.1/aisp/account-access-consents/{consentID}][%d] getAccountAccessConsentRequestUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAccountAccessConsentRequestUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAccountAccessConsentRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountAccessConsentRequestForbidden creates a GetAccountAccessConsentRequestForbidden with default headers values
func NewGetAccountAccessConsentRequestForbidden() *GetAccountAccessConsentRequestForbidden {
	return &GetAccountAccessConsentRequestForbidden{}
}

/*GetAccountAccessConsentRequestForbidden handles this case with default header values.

ErrorResponse
*/
type GetAccountAccessConsentRequestForbidden struct {
	Payload *models.ErrorResponse
}

func (o *GetAccountAccessConsentRequestForbidden) Error() string {
	return fmt.Sprintf("[GET /{tid}/{aid}/open-banking/v3.1/aisp/account-access-consents/{consentID}][%d] getAccountAccessConsentRequestForbidden  %+v", 403, o.Payload)
}

func (o *GetAccountAccessConsentRequestForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAccountAccessConsentRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountAccessConsentRequestMethodNotAllowed creates a GetAccountAccessConsentRequestMethodNotAllowed with default headers values
func NewGetAccountAccessConsentRequestMethodNotAllowed() *GetAccountAccessConsentRequestMethodNotAllowed {
	return &GetAccountAccessConsentRequestMethodNotAllowed{}
}

/*GetAccountAccessConsentRequestMethodNotAllowed handles this case with default header values.

ErrorResponse
*/
type GetAccountAccessConsentRequestMethodNotAllowed struct {
	Payload *models.ErrorResponse
}

func (o *GetAccountAccessConsentRequestMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /{tid}/{aid}/open-banking/v3.1/aisp/account-access-consents/{consentID}][%d] getAccountAccessConsentRequestMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetAccountAccessConsentRequestMethodNotAllowed) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAccountAccessConsentRequestMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountAccessConsentRequestNotAcceptable creates a GetAccountAccessConsentRequestNotAcceptable with default headers values
func NewGetAccountAccessConsentRequestNotAcceptable() *GetAccountAccessConsentRequestNotAcceptable {
	return &GetAccountAccessConsentRequestNotAcceptable{}
}

/*GetAccountAccessConsentRequestNotAcceptable handles this case with default header values.

ErrorResponse
*/
type GetAccountAccessConsentRequestNotAcceptable struct {
	Payload *models.ErrorResponse
}

func (o *GetAccountAccessConsentRequestNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /{tid}/{aid}/open-banking/v3.1/aisp/account-access-consents/{consentID}][%d] getAccountAccessConsentRequestNotAcceptable  %+v", 406, o.Payload)
}

func (o *GetAccountAccessConsentRequestNotAcceptable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAccountAccessConsentRequestNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountAccessConsentRequestUnsupportedMediaType creates a GetAccountAccessConsentRequestUnsupportedMediaType with default headers values
func NewGetAccountAccessConsentRequestUnsupportedMediaType() *GetAccountAccessConsentRequestUnsupportedMediaType {
	return &GetAccountAccessConsentRequestUnsupportedMediaType{}
}

/*GetAccountAccessConsentRequestUnsupportedMediaType handles this case with default header values.

ErrorResponse
*/
type GetAccountAccessConsentRequestUnsupportedMediaType struct {
	Payload *models.ErrorResponse
}

func (o *GetAccountAccessConsentRequestUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /{tid}/{aid}/open-banking/v3.1/aisp/account-access-consents/{consentID}][%d] getAccountAccessConsentRequestUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAccountAccessConsentRequestUnsupportedMediaType) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAccountAccessConsentRequestUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountAccessConsentRequestTooManyRequests creates a GetAccountAccessConsentRequestTooManyRequests with default headers values
func NewGetAccountAccessConsentRequestTooManyRequests() *GetAccountAccessConsentRequestTooManyRequests {
	return &GetAccountAccessConsentRequestTooManyRequests{}
}

/*GetAccountAccessConsentRequestTooManyRequests handles this case with default header values.

ErrorResponse
*/
type GetAccountAccessConsentRequestTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *GetAccountAccessConsentRequestTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /{tid}/{aid}/open-banking/v3.1/aisp/account-access-consents/{consentID}][%d] getAccountAccessConsentRequestTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAccountAccessConsentRequestTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAccountAccessConsentRequestTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountAccessConsentRequestInternalServerError creates a GetAccountAccessConsentRequestInternalServerError with default headers values
func NewGetAccountAccessConsentRequestInternalServerError() *GetAccountAccessConsentRequestInternalServerError {
	return &GetAccountAccessConsentRequestInternalServerError{}
}

/*GetAccountAccessConsentRequestInternalServerError handles this case with default header values.

ErrorResponse
*/
type GetAccountAccessConsentRequestInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetAccountAccessConsentRequestInternalServerError) Error() string {
	return fmt.Sprintf("[GET /{tid}/{aid}/open-banking/v3.1/aisp/account-access-consents/{consentID}][%d] getAccountAccessConsentRequestInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAccountAccessConsentRequestInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAccountAccessConsentRequestInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
