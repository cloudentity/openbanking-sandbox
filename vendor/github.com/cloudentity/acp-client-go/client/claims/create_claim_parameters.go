// Code generated by go-swagger; DO NOT EDIT.

package claims

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// NewCreateClaimParams creates a new CreateClaimParams object
// with the default values initialized.
func NewCreateClaimParams() *CreateClaimParams {
	var (
		tidDefault = string("default")
	)
	return &CreateClaimParams{
		Tid: tidDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateClaimParamsWithTimeout creates a new CreateClaimParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateClaimParamsWithTimeout(timeout time.Duration) *CreateClaimParams {
	var (
		tidDefault = string("default")
	)
	return &CreateClaimParams{
		Tid: tidDefault,

		timeout: timeout,
	}
}

// NewCreateClaimParamsWithContext creates a new CreateClaimParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateClaimParamsWithContext(ctx context.Context) *CreateClaimParams {
	var (
		tidDefault = string("default")
	)
	return &CreateClaimParams{
		Tid: tidDefault,

		Context: ctx,
	}
}

// NewCreateClaimParamsWithHTTPClient creates a new CreateClaimParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateClaimParamsWithHTTPClient(client *http.Client) *CreateClaimParams {
	var (
		tidDefault = string("default")
	)
	return &CreateClaimParams{
		Tid:        tidDefault,
		HTTPClient: client,
	}
}

/*CreateClaimParams contains all the parameters to send to the API endpoint
for the create claim operation typically these are written to a http.Request
*/
type CreateClaimParams struct {

	/*Claim*/
	Claim *models.Claim
	/*Tid
	  Tenant id

	*/
	Tid string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create claim params
func (o *CreateClaimParams) WithTimeout(timeout time.Duration) *CreateClaimParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create claim params
func (o *CreateClaimParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create claim params
func (o *CreateClaimParams) WithContext(ctx context.Context) *CreateClaimParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create claim params
func (o *CreateClaimParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create claim params
func (o *CreateClaimParams) WithHTTPClient(client *http.Client) *CreateClaimParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create claim params
func (o *CreateClaimParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClaim adds the claim to the create claim params
func (o *CreateClaimParams) WithClaim(claim *models.Claim) *CreateClaimParams {
	o.SetClaim(claim)
	return o
}

// SetClaim adds the claim to the create claim params
func (o *CreateClaimParams) SetClaim(claim *models.Claim) {
	o.Claim = claim
}

// WithTid adds the tid to the create claim params
func (o *CreateClaimParams) WithTid(tid string) *CreateClaimParams {
	o.SetTid(tid)
	return o
}

// SetTid adds the tid to the create claim params
func (o *CreateClaimParams) SetTid(tid string) {
	o.Tid = tid
}

// WriteToRequest writes these params to a swagger request
func (o *CreateClaimParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Claim != nil {
		if err := r.SetBodyParam(o.Claim); err != nil {
			return err
		}
	}

	// path param tid
	if err := r.SetPathParam("tid", o.Tid); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
