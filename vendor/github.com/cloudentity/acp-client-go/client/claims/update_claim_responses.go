// Code generated by go-swagger; DO NOT EDIT.

package claims

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// UpdateClaimReader is a Reader for the UpdateClaim structure.
type UpdateClaimReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateClaimReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateClaimOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateClaimBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateClaimUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateClaimForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateClaimNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateClaimUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateClaimOK creates a UpdateClaimOK with default headers values
func NewUpdateClaimOK() *UpdateClaimOK {
	return &UpdateClaimOK{}
}

/*UpdateClaimOK handles this case with default header values.

Claim
*/
type UpdateClaimOK struct {
	Payload *models.Claim
}

func (o *UpdateClaimOK) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/claims/{claim}][%d] updateClaimOK  %+v", 200, o.Payload)
}

func (o *UpdateClaimOK) GetPayload() *models.Claim {
	return o.Payload
}

func (o *UpdateClaimOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Claim)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClaimBadRequest creates a UpdateClaimBadRequest with default headers values
func NewUpdateClaimBadRequest() *UpdateClaimBadRequest {
	return &UpdateClaimBadRequest{}
}

/*UpdateClaimBadRequest handles this case with default header values.

HttpError
*/
type UpdateClaimBadRequest struct {
	Payload *models.Error
}

func (o *UpdateClaimBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/claims/{claim}][%d] updateClaimBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateClaimBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClaimBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClaimUnauthorized creates a UpdateClaimUnauthorized with default headers values
func NewUpdateClaimUnauthorized() *UpdateClaimUnauthorized {
	return &UpdateClaimUnauthorized{}
}

/*UpdateClaimUnauthorized handles this case with default header values.

HttpError
*/
type UpdateClaimUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateClaimUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/claims/{claim}][%d] updateClaimUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateClaimUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClaimUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClaimForbidden creates a UpdateClaimForbidden with default headers values
func NewUpdateClaimForbidden() *UpdateClaimForbidden {
	return &UpdateClaimForbidden{}
}

/*UpdateClaimForbidden handles this case with default header values.

HttpError
*/
type UpdateClaimForbidden struct {
	Payload *models.Error
}

func (o *UpdateClaimForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/claims/{claim}][%d] updateClaimForbidden  %+v", 403, o.Payload)
}

func (o *UpdateClaimForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClaimForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClaimNotFound creates a UpdateClaimNotFound with default headers values
func NewUpdateClaimNotFound() *UpdateClaimNotFound {
	return &UpdateClaimNotFound{}
}

/*UpdateClaimNotFound handles this case with default header values.

HttpError
*/
type UpdateClaimNotFound struct {
	Payload *models.Error
}

func (o *UpdateClaimNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/claims/{claim}][%d] updateClaimNotFound  %+v", 404, o.Payload)
}

func (o *UpdateClaimNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClaimNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClaimUnprocessableEntity creates a UpdateClaimUnprocessableEntity with default headers values
func NewUpdateClaimUnprocessableEntity() *UpdateClaimUnprocessableEntity {
	return &UpdateClaimUnprocessableEntity{}
}

/*UpdateClaimUnprocessableEntity handles this case with default header values.

HttpError
*/
type UpdateClaimUnprocessableEntity struct {
	Payload *models.Error
}

func (o *UpdateClaimUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/claims/{claim}][%d] updateClaimUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateClaimUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClaimUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
