// Code generated by go-swagger; DO NOT EDIT.

package gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// NewSetGatewayConfigurationParams creates a new SetGatewayConfigurationParams object
// with the default values initialized.
func NewSetGatewayConfigurationParams() *SetGatewayConfigurationParams {
	var (
		authorizerVersionDefault = string("latest")
		tidDefault               = string("default")
	)
	return &SetGatewayConfigurationParams{
		AuthorizerVersion: &authorizerVersionDefault,
		Tid:               tidDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewSetGatewayConfigurationParamsWithTimeout creates a new SetGatewayConfigurationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetGatewayConfigurationParamsWithTimeout(timeout time.Duration) *SetGatewayConfigurationParams {
	var (
		authorizerVersionDefault = string("latest")
		tidDefault               = string("default")
	)
	return &SetGatewayConfigurationParams{
		AuthorizerVersion: &authorizerVersionDefault,
		Tid:               tidDefault,

		timeout: timeout,
	}
}

// NewSetGatewayConfigurationParamsWithContext creates a new SetGatewayConfigurationParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetGatewayConfigurationParamsWithContext(ctx context.Context) *SetGatewayConfigurationParams {
	var (
		authorizerVersionDefault = string("latest")
		tidDefault               = string("default")
	)
	return &SetGatewayConfigurationParams{
		AuthorizerVersion: &authorizerVersionDefault,
		Tid:               tidDefault,

		Context: ctx,
	}
}

// NewSetGatewayConfigurationParamsWithHTTPClient creates a new SetGatewayConfigurationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetGatewayConfigurationParamsWithHTTPClient(client *http.Client) *SetGatewayConfigurationParams {
	var (
		authorizerVersionDefault = string("latest")
		tidDefault               = string("default")
	)
	return &SetGatewayConfigurationParams{
		AuthorizerVersion: &authorizerVersionDefault,
		Tid:               tidDefault,
		HTTPClient:        client,
	}
}

/*SetGatewayConfigurationParams contains all the parameters to send to the API endpoint
for the set gateway configuration operation typically these are written to a http.Request
*/
type SetGatewayConfigurationParams struct {

	/*SetGatewayConfigurationRequest*/
	SetGatewayConfigurationRequest *models.SetGatewayConfigurationRequest
	/*AuthorizerVersion
	  Authorizer version

	*/
	AuthorizerVersion *string
	/*Tid
	  Tenant id

	*/
	Tid string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set gateway configuration params
func (o *SetGatewayConfigurationParams) WithTimeout(timeout time.Duration) *SetGatewayConfigurationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set gateway configuration params
func (o *SetGatewayConfigurationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set gateway configuration params
func (o *SetGatewayConfigurationParams) WithContext(ctx context.Context) *SetGatewayConfigurationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set gateway configuration params
func (o *SetGatewayConfigurationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set gateway configuration params
func (o *SetGatewayConfigurationParams) WithHTTPClient(client *http.Client) *SetGatewayConfigurationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set gateway configuration params
func (o *SetGatewayConfigurationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSetGatewayConfigurationRequest adds the setGatewayConfigurationRequest to the set gateway configuration params
func (o *SetGatewayConfigurationParams) WithSetGatewayConfigurationRequest(setGatewayConfigurationRequest *models.SetGatewayConfigurationRequest) *SetGatewayConfigurationParams {
	o.SetSetGatewayConfigurationRequest(setGatewayConfigurationRequest)
	return o
}

// SetSetGatewayConfigurationRequest adds the setGatewayConfigurationRequest to the set gateway configuration params
func (o *SetGatewayConfigurationParams) SetSetGatewayConfigurationRequest(setGatewayConfigurationRequest *models.SetGatewayConfigurationRequest) {
	o.SetGatewayConfigurationRequest = setGatewayConfigurationRequest
}

// WithAuthorizerVersion adds the authorizerVersion to the set gateway configuration params
func (o *SetGatewayConfigurationParams) WithAuthorizerVersion(authorizerVersion *string) *SetGatewayConfigurationParams {
	o.SetAuthorizerVersion(authorizerVersion)
	return o
}

// SetAuthorizerVersion adds the authorizerVersion to the set gateway configuration params
func (o *SetGatewayConfigurationParams) SetAuthorizerVersion(authorizerVersion *string) {
	o.AuthorizerVersion = authorizerVersion
}

// WithTid adds the tid to the set gateway configuration params
func (o *SetGatewayConfigurationParams) WithTid(tid string) *SetGatewayConfigurationParams {
	o.SetTid(tid)
	return o
}

// SetTid adds the tid to the set gateway configuration params
func (o *SetGatewayConfigurationParams) SetTid(tid string) {
	o.Tid = tid
}

// WriteToRequest writes these params to a swagger request
func (o *SetGatewayConfigurationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SetGatewayConfigurationRequest != nil {
		if err := r.SetBodyParam(o.SetGatewayConfigurationRequest); err != nil {
			return err
		}
	}

	if o.AuthorizerVersion != nil {

		// query param authorizer_version
		var qrAuthorizerVersion string
		if o.AuthorizerVersion != nil {
			qrAuthorizerVersion = *o.AuthorizerVersion
		}
		qAuthorizerVersion := qrAuthorizerVersion
		if qAuthorizerVersion != "" {
			if err := r.SetQueryParam("authorizer_version", qAuthorizerVersion); err != nil {
				return err
			}
		}

	}

	// path param tid
	if err := r.SetPathParam("tid", o.Tid); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
