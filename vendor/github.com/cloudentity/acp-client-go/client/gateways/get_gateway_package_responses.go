// Code generated by go-swagger; DO NOT EDIT.

package gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// GetGatewayPackageReader is a Reader for the GetGatewayPackage structure.
type GetGatewayPackageReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *GetGatewayPackageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGatewayPackageOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGatewayPackageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetGatewayPackageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGatewayPackageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGatewayPackageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGatewayPackageOK creates a GetGatewayPackageOK with default headers values
func NewGetGatewayPackageOK(writer io.Writer) *GetGatewayPackageOK {
	return &GetGatewayPackageOK{
		Payload: writer,
	}
}

/*GetGatewayPackageOK handles this case with default header values.

Gateway package
*/
type GetGatewayPackageOK struct {
	Payload io.Writer
}

func (o *GetGatewayPackageOK) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/gateways/{gw}/package][%d] getGatewayPackageOK  %+v", 200, o.Payload)
}

func (o *GetGatewayPackageOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *GetGatewayPackageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGatewayPackageBadRequest creates a GetGatewayPackageBadRequest with default headers values
func NewGetGatewayPackageBadRequest() *GetGatewayPackageBadRequest {
	return &GetGatewayPackageBadRequest{}
}

/*GetGatewayPackageBadRequest handles this case with default header values.

HttpError
*/
type GetGatewayPackageBadRequest struct {
	Payload *models.Error
}

func (o *GetGatewayPackageBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/gateways/{gw}/package][%d] getGatewayPackageBadRequest  %+v", 400, o.Payload)
}

func (o *GetGatewayPackageBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGatewayPackageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGatewayPackageUnauthorized creates a GetGatewayPackageUnauthorized with default headers values
func NewGetGatewayPackageUnauthorized() *GetGatewayPackageUnauthorized {
	return &GetGatewayPackageUnauthorized{}
}

/*GetGatewayPackageUnauthorized handles this case with default header values.

HttpError
*/
type GetGatewayPackageUnauthorized struct {
	Payload *models.Error
}

func (o *GetGatewayPackageUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/gateways/{gw}/package][%d] getGatewayPackageUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGatewayPackageUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGatewayPackageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGatewayPackageForbidden creates a GetGatewayPackageForbidden with default headers values
func NewGetGatewayPackageForbidden() *GetGatewayPackageForbidden {
	return &GetGatewayPackageForbidden{}
}

/*GetGatewayPackageForbidden handles this case with default header values.

HttpError
*/
type GetGatewayPackageForbidden struct {
	Payload *models.Error
}

func (o *GetGatewayPackageForbidden) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/gateways/{gw}/package][%d] getGatewayPackageForbidden  %+v", 403, o.Payload)
}

func (o *GetGatewayPackageForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGatewayPackageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGatewayPackageNotFound creates a GetGatewayPackageNotFound with default headers values
func NewGetGatewayPackageNotFound() *GetGatewayPackageNotFound {
	return &GetGatewayPackageNotFound{}
}

/*GetGatewayPackageNotFound handles this case with default header values.

HttpError
*/
type GetGatewayPackageNotFound struct {
	Payload *models.Error
}

func (o *GetGatewayPackageNotFound) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/gateways/{gw}/package][%d] getGatewayPackageNotFound  %+v", 404, o.Payload)
}

func (o *GetGatewayPackageNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGatewayPackageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
