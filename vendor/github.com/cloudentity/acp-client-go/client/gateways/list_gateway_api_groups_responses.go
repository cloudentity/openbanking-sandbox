// Code generated by go-swagger; DO NOT EDIT.

package gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// ListGatewayAPIGroupsReader is a Reader for the ListGatewayAPIGroups structure.
type ListGatewayAPIGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListGatewayAPIGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListGatewayAPIGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListGatewayAPIGroupsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListGatewayAPIGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListGatewayAPIGroupsOK creates a ListGatewayAPIGroupsOK with default headers values
func NewListGatewayAPIGroupsOK() *ListGatewayAPIGroupsOK {
	return &ListGatewayAPIGroupsOK{}
}

/*ListGatewayAPIGroupsOK handles this case with default header values.

GatewayAPIGroups
*/
type ListGatewayAPIGroupsOK struct {
	Payload *models.GatewayAPIGroups
}

func (o *ListGatewayAPIGroupsOK) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/gateways/{gw}/groups][%d] listGatewayApiGroupsOK  %+v", 200, o.Payload)
}

func (o *ListGatewayAPIGroupsOK) GetPayload() *models.GatewayAPIGroups {
	return o.Payload
}

func (o *ListGatewayAPIGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayAPIGroups)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListGatewayAPIGroupsUnauthorized creates a ListGatewayAPIGroupsUnauthorized with default headers values
func NewListGatewayAPIGroupsUnauthorized() *ListGatewayAPIGroupsUnauthorized {
	return &ListGatewayAPIGroupsUnauthorized{}
}

/*ListGatewayAPIGroupsUnauthorized handles this case with default header values.

HttpError
*/
type ListGatewayAPIGroupsUnauthorized struct {
	Payload *models.Error
}

func (o *ListGatewayAPIGroupsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/gateways/{gw}/groups][%d] listGatewayApiGroupsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListGatewayAPIGroupsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListGatewayAPIGroupsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListGatewayAPIGroupsForbidden creates a ListGatewayAPIGroupsForbidden with default headers values
func NewListGatewayAPIGroupsForbidden() *ListGatewayAPIGroupsForbidden {
	return &ListGatewayAPIGroupsForbidden{}
}

/*ListGatewayAPIGroupsForbidden handles this case with default header values.

HttpError
*/
type ListGatewayAPIGroupsForbidden struct {
	Payload *models.Error
}

func (o *ListGatewayAPIGroupsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/gateways/{gw}/groups][%d] listGatewayApiGroupsForbidden  %+v", 403, o.Payload)
}

func (o *ListGatewayAPIGroupsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListGatewayAPIGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
