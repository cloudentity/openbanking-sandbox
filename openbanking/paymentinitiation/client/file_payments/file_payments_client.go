// Code generated by go-swagger; DO NOT EDIT.

package file_payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new file payments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for file payments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateFilePaymentConsents(params *CreateFilePaymentConsentsParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFilePaymentConsentsCreated, error)

	CreateFilePaymentConsentsConsentIDFile(params *CreateFilePaymentConsentsConsentIDFileParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFilePaymentConsentsConsentIDFileOK, error)

	CreateFilePayments(params *CreateFilePaymentsParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFilePaymentsCreated, error)

	GetFilePaymentConsentsConsentID(params *GetFilePaymentConsentsConsentIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetFilePaymentConsentsConsentIDOK, error)

	GetFilePaymentConsentsConsentIDFile(params *GetFilePaymentConsentsConsentIDFileParams, authInfo runtime.ClientAuthInfoWriter) (*GetFilePaymentConsentsConsentIDFileOK, error)

	GetFilePaymentsFilePaymentID(params *GetFilePaymentsFilePaymentIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetFilePaymentsFilePaymentIDOK, error)

	GetFilePaymentsFilePaymentIDReportFile(params *GetFilePaymentsFilePaymentIDReportFileParams, authInfo runtime.ClientAuthInfoWriter) (*GetFilePaymentsFilePaymentIDReportFileOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateFilePaymentConsents creates file payment consents
*/
func (a *Client) CreateFilePaymentConsents(params *CreateFilePaymentConsentsParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFilePaymentConsentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFilePaymentConsentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateFilePaymentConsents",
		Method:             "POST",
		PathPattern:        "/file-payment-consents",
		ProducesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateFilePaymentConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFilePaymentConsentsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateFilePaymentConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateFilePaymentConsentsConsentIDFile creates file payment consents
*/
func (a *Client) CreateFilePaymentConsentsConsentIDFile(params *CreateFilePaymentConsentsConsentIDFileParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFilePaymentConsentsConsentIDFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFilePaymentConsentsConsentIDFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateFilePaymentConsentsConsentIdFile",
		Method:             "POST",
		PathPattern:        "/file-payment-consents/{ConsentId}/file",
		ProducesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateFilePaymentConsentsConsentIDFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFilePaymentConsentsConsentIDFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateFilePaymentConsentsConsentIdFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateFilePayments creates file payments
*/
func (a *Client) CreateFilePayments(params *CreateFilePaymentsParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFilePaymentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFilePaymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateFilePayments",
		Method:             "POST",
		PathPattern:        "/file-payments",
		ProducesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateFilePaymentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFilePaymentsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateFilePayments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFilePaymentConsentsConsentID gets file payment consents
*/
func (a *Client) GetFilePaymentConsentsConsentID(params *GetFilePaymentConsentsConsentIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetFilePaymentConsentsConsentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilePaymentConsentsConsentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFilePaymentConsentsConsentId",
		Method:             "GET",
		PathPattern:        "/file-payment-consents/{ConsentId}",
		ProducesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilePaymentConsentsConsentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilePaymentConsentsConsentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFilePaymentConsentsConsentId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFilePaymentConsentsConsentIDFile gets file payment consents
*/
func (a *Client) GetFilePaymentConsentsConsentIDFile(params *GetFilePaymentConsentsConsentIDFileParams, authInfo runtime.ClientAuthInfoWriter) (*GetFilePaymentConsentsConsentIDFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilePaymentConsentsConsentIDFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFilePaymentConsentsConsentIdFile",
		Method:             "GET",
		PathPattern:        "/file-payment-consents/{ConsentId}/file",
		ProducesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilePaymentConsentsConsentIDFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilePaymentConsentsConsentIDFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFilePaymentConsentsConsentIdFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFilePaymentsFilePaymentID gets file payments
*/
func (a *Client) GetFilePaymentsFilePaymentID(params *GetFilePaymentsFilePaymentIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetFilePaymentsFilePaymentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilePaymentsFilePaymentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFilePaymentsFilePaymentId",
		Method:             "GET",
		PathPattern:        "/file-payments/{FilePaymentId}",
		ProducesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilePaymentsFilePaymentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilePaymentsFilePaymentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFilePaymentsFilePaymentId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFilePaymentsFilePaymentIDReportFile gets file payments
*/
func (a *Client) GetFilePaymentsFilePaymentIDReportFile(params *GetFilePaymentsFilePaymentIDReportFileParams, authInfo runtime.ClientAuthInfoWriter) (*GetFilePaymentsFilePaymentIDReportFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilePaymentsFilePaymentIDReportFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFilePaymentsFilePaymentIdReportFile",
		Method:             "GET",
		PathPattern:        "/file-payments/{FilePaymentId}/report-file",
		ProducesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilePaymentsFilePaymentIDReportFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilePaymentsFilePaymentIDReportFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFilePaymentsFilePaymentIdReportFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
